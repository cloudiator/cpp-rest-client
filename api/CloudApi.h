/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CloudApi.h
 *
 * 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_API_CloudApi_H_
#define IO_GITHUB_CLOUDIATOR_REST_API_CloudApi_H_


#include "../ApiClient.h"

#include "Cloud.h"
#include "Error.h"
#include "Hardware.h"
#include "Image.h"
#include "Location.h"
#include "NewCloud.h"
#include "Queue.h"
#include "VirtualMachine.h"
#include "VirtualMachineRequest.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace api {

using namespace io::github::cloudiator::rest::model;

class  CloudApi
{
public:
    CloudApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~CloudApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a new cloud.
    /// </remarks>
    /// <param name="cloud">Cloud to add</param>
    pplx::task<std::shared_ptr<Cloud>> addCloud(
        std::shared_ptr<NewCloud> cloud
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a new virtual machine request
    /// </remarks>
    /// <param name="virtualMachineRequest">VirtualMachine Request</param>
    pplx::task<std::shared_ptr<Queue>> addVM(
        std::shared_ptr<VirtualMachineRequest> virtualMachineRequest
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Deletes the cloud identified by the given id paramater. 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<void> deleteCloud(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a specific hardware 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    /// <param name="hardware">Hardware to update </param>
    pplx::task<std::shared_ptr<Hardware>> editHardware(
        utility::string_t id,
        std::shared_ptr<Hardware> hardware
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a specific image 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    /// <param name="image">Image to update </param>
    pplx::task<std::shared_ptr<Image>> editImage(
        utility::string_t id,
        std::shared_ptr<Image> image
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a specific location 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    /// <param name="location">Location to update </param>
    pplx::task<std::shared_ptr<Location>> editLocation(
        utility::string_t id,
        std::shared_ptr<Location> location
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns the cloud identified by the given id parameter 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<Cloud>> findCloud(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns all clouds from the system that the user has access to 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Cloud>>> findClouds(
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns all hardware visible to the user 
    /// </remarks>
    /// <param name="cloudId">(Optional) Unique identifier to filter a specific cloud (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Hardware>>> findHardware(
        boost::optional<utility::string_t> cloudId
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns all images visable to the user 
    /// </remarks>
    /// <param name="cloudId">(Optional) Unique identifier to filter a specific cloud (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Image>>> findImages(
        boost::optional<utility::string_t> cloudId
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns all locations visible to the user 
    /// </remarks>
    /// <param name="cloudId">(Optional) Unique identifier to filter a specific cloud (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Location>>> findLocations(
        boost::optional<utility::string_t> cloudId
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Finds all virtual machines the user has access to
    /// </remarks>
    /// <param name="cloudId">(Optional) Unique identifier to filter a specific cloud (optional)</param>
    pplx::task<std::vector<std::shared_ptr<VirtualMachine>>> findVMs(
        boost::optional<utility::string_t> cloudId
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieves the hardware with the given id. 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<Hardware>> getHardware(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieves the image with the given id. 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<Image>> getImage(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieves the location with the given id. 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<Location>> getLocation(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Finds the virtual machine identified by the given id parameter
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<VirtualMachine>> getVM(
        utility::string_t id
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_API_CloudApi_H_ */

