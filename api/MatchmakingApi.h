/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MatchmakingApi.h
 *
 * 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_API_MatchmakingApi_H_
#define IO_GITHUB_CLOUDIATOR_REST_API_MatchmakingApi_H_


#include "../ApiClient.h"

#include "NodeCandidate.h"
#include "NodeRequirements.h"
#include "Requirement.h"
#include <vector>

#include <boost/optional.hpp>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace api {

using namespace io::github::cloudiator::rest::model;

class  MatchmakingApi
{
public:
    MatchmakingApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~MatchmakingApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns possible node candidates. 
    /// </remarks>
    /// <param name="nodeRequirements">Node Request  (optional)</param>
    pplx::task<std::vector<std::shared_ptr<NodeCandidate>>> findNodeCandidates(
        boost::optional<std::vector<std::shared_ptr<Requirement>>> nodeRequirements
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Solves a matchmaking problem
    /// </remarks>
    /// <param name="nodeRequirements">The requirements with respect to nodes</param>
    pplx::task<std::vector<std::shared_ptr<NodeCandidate>>> solveMatchmaking(
        std::shared_ptr<NodeRequirements> nodeRequirements
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_API_MatchmakingApi_H_ */

