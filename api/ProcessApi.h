/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ProcessApi.h
 *
 * 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_API_ProcessApi_H_
#define IO_GITHUB_CLOUDIATOR_REST_API_ProcessApi_H_


#include "../ApiClient.h"

#include "Process.h"
#include "ProcessNew.h"
#include "Queue.h"
#include "Schedule.h"
#include "ScheduleNew.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace api {

using namespace io::github::cloudiator::rest::model;

class  ProcessApi
{
public:
    ProcessApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ProcessApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a new schedule 
    /// </remarks>
    /// <param name="schedule">Schedule to be created </param>
    pplx::task<std::shared_ptr<Queue>> addSchedule(
        std::shared_ptr<ScheduleNew> schedule
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a new process 
    /// </remarks>
    /// <param name="process">Process to be created </param>
    pplx::task<std::shared_ptr<Queue>> createProcess(
        std::shared_ptr<ProcessNew> process
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Deletes the process corresponding to the given id. 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<Queue>> deleteProcess(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Finds the process corresponding to the given id. 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<Process>> findProcess(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieves the schedule identified by parameter id. 
    /// </remarks>
    /// <param name="id">Unique identifier of the resource</param>
    pplx::task<std::shared_ptr<Schedule>> findSchedule(
        utility::string_t id
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieves all process of the current user matching the parameters. 
    /// </remarks>
    /// <param name="scheduleId">Id of the schedule.  (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Process>>> getProcesses(
        boost::optional<utility::string_t> scheduleId
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieves all schedules by the current user. 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Schedule>>> getSchedules(
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_API_ProcessApi_H_ */

