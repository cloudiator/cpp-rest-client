/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PushSensor.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

PushSensor::PushSensor()
{
    m_Port = 0;
    m_PortIsSet = false;
}

PushSensor::~PushSensor()
{
}

void PushSensor::validate()
{
    // TODO: implement validation
}

web::json::value PushSensor::toJson() const
{
    web::json::value val = this->Sensor::toJson();

    if(m_PortIsSet)
    {
        val[utility::conversions::to_string_t("port")] = ModelBase::toJson(m_Port);
    }

    return val;
}

void PushSensor::fromJson(web::json::value& val)
{
    this->Sensor::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("port")))
    {
        setPort(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("port")]));
    }
}

void PushSensor::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_PortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("port"), m_Port));
    }
}

void PushSensor::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("port")))
    {
        setPort(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("port"))));
    }
}

int32_t PushSensor::getPort() const
{
    return m_Port;
}


void PushSensor::setPort(int32_t value)
{
    m_Port = value;
    m_PortIsSet = true;
}
bool PushSensor::portIsSet() const
{
    return m_PortIsSet;
}

void PushSensor::unsetPort()
{
    m_PortIsSet = false;
}

}
}
}
}
}

