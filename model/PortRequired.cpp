/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PortRequired.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

PortRequired::PortRequired()
{
    m_UpdateAction = utility::conversions::to_string_t("");
    m_UpdateActionIsSet = false;
    m_IsMandatory = false;
}

PortRequired::~PortRequired()
{
}

void PortRequired::validate()
{
    // TODO: implement validation
}

web::json::value PortRequired::toJson() const
{
    web::json::value val = this->Port::toJson();

    if(m_UpdateActionIsSet)
    {
        val[utility::conversions::to_string_t("updateAction")] = ModelBase::toJson(m_UpdateAction);
    }
    val[utility::conversions::to_string_t("isMandatory")] = ModelBase::toJson(m_IsMandatory);

    return val;
}

void PortRequired::fromJson(web::json::value& val)
{
    this->Port::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("updateAction")))
    {
        setUpdateAction(ModelBase::stringFromJson(val[utility::conversions::to_string_t("updateAction")]));
    }
    setIsMandatory(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isMandatory")]));
}

void PortRequired::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    if(m_UpdateActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updateAction"), m_UpdateAction));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMandatory"), m_IsMandatory));
}

void PortRequired::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    if(multipart->hasContent(utility::conversions::to_string_t("updateAction")))
    {
        setUpdateAction(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updateAction"))));
    }
    setIsMandatory(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMandatory"))));
}

utility::string_t PortRequired::getUpdateAction() const
{
    return m_UpdateAction;
}


void PortRequired::setUpdateAction(utility::string_t value)
{
    m_UpdateAction = value;
    m_UpdateActionIsSet = true;
}
bool PortRequired::updateActionIsSet() const
{
    return m_UpdateActionIsSet;
}

void PortRequired::unsetUpdateAction()
{
    m_UpdateActionIsSet = false;
}

bool PortRequired::isIsMandatory() const
{
    return m_IsMandatory;
}


void PortRequired::setIsMandatory(bool value)
{
    m_IsMandatory = value;
    
}
}
}
}
}
}

