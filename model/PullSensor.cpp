/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PullSensor.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

PullSensor::PullSensor()
{
    m_ClassName = utility::conversions::to_string_t("");
    m_ClassNameIsSet = false;
    m_ConfigurationIsSet = false;
    m_IntervalIsSet = false;
}

PullSensor::~PullSensor()
{
}

void PullSensor::validate()
{
    // TODO: implement validation
}

web::json::value PullSensor::toJson() const
{
    web::json::value val = this->Sensor::toJson();

    if(m_ClassNameIsSet)
    {
        val[utility::conversions::to_string_t("className")] = ModelBase::toJson(m_ClassName);
    }
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_IntervalIsSet)
    {
        val[utility::conversions::to_string_t("interval")] = ModelBase::toJson(m_Interval);
    }

    return val;
}

void PullSensor::fromJson(web::json::value& val)
{
    this->Sensor::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("className")))
    {
        setClassName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("className")]));
    }
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        if(!val[utility::conversions::to_string_t("configuration")].is_null())
        {
            std::shared_ptr<Map> newItem(new Map());
            newItem->fromJson(val[utility::conversions::to_string_t("configuration")]);
            setConfiguration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interval")))
    {
        if(!val[utility::conversions::to_string_t("interval")].is_null())
        {
            std::shared_ptr<Interval> newItem(new Interval());
            newItem->fromJson(val[utility::conversions::to_string_t("interval")]);
            setInterval( newItem );
        }
    }
}

void PullSensor::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_ClassNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("className"), m_ClassName));
        
    }
    if(m_ConfigurationIsSet)
    {
        if (m_Configuration.get())
        {
            m_Configuration->toMultipart(multipart, utility::conversions::to_string_t("configuration."));
        }
        
    }
    if(m_IntervalIsSet)
    {
        if (m_Interval.get())
        {
            m_Interval->toMultipart(multipart, utility::conversions::to_string_t("interval."));
        }
        
    }
}

void PullSensor::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("className")))
    {
        setClassName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("className"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
        {
            std::shared_ptr<Map> newItem(new Map());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("configuration."));
            setConfiguration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("interval")))
        {
            std::shared_ptr<Interval> newItem(new Interval());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("interval."));
            setInterval( newItem );
        }
    }
}

utility::string_t PullSensor::getClassName() const
{
    return m_ClassName;
}


void PullSensor::setClassName(utility::string_t value)
{
    m_ClassName = value;
    m_ClassNameIsSet = true;
}
bool PullSensor::classNameIsSet() const
{
    return m_ClassNameIsSet;
}

void PullSensor::unsetClassName()
{
    m_ClassNameIsSet = false;
}

std::shared_ptr<Map> PullSensor::getConfiguration() const
{
    return m_Configuration;
}


void PullSensor::setConfiguration(std::shared_ptr<Map> value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}
bool PullSensor::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void PullSensor::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}

std::shared_ptr<Interval> PullSensor::getInterval() const
{
    return m_Interval;
}


void PullSensor::setInterval(std::shared_ptr<Interval> value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}
bool PullSensor::intervalIsSet() const
{
    return m_IntervalIsSet;
}

void PullSensor::unsetInterval()
{
    m_IntervalIsSet = false;
}

}
}
}
}
}

