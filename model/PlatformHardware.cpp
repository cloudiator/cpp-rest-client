/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PlatformHardware.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

PlatformHardware::PlatformHardware()
{
    m_Name = utility::conversions::to_string_t("");
    m_Cores = 0;
    m_Ram = 0L;
    m_Disk = 0.0f;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

PlatformHardware::~PlatformHardware()
{
}

void PlatformHardware::validate()
{
    // TODO: implement validation
}

web::json::value PlatformHardware::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("cores")] = ModelBase::toJson(m_Cores);
    val[utility::conversions::to_string_t("ram")] = ModelBase::toJson(m_Ram);
    val[utility::conversions::to_string_t("disk")] = ModelBase::toJson(m_Disk);
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

void PlatformHardware::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setCores(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("cores")]));
    setRam(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("ram")]));
    setDisk(ModelBase::floatFromJson(val[utility::conversions::to_string_t("disk")]));
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
}

void PlatformHardware::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cores"), m_Cores));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ram"), m_Ram));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disk"), m_Disk));
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
}

void PlatformHardware::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setCores(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cores"))));
    setRam(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ram"))));
    setDisk(ModelBase::floatFromHttpContent(multipart->getContent(utility::conversions::to_string_t("disk"))));
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
}

utility::string_t PlatformHardware::getName() const
{
    return m_Name;
}


void PlatformHardware::setName(utility::string_t value)
{
    m_Name = value;
    
}
int32_t PlatformHardware::getCores() const
{
    return m_Cores;
}


void PlatformHardware::setCores(int32_t value)
{
    m_Cores = value;
    
}
int64_t PlatformHardware::getRam() const
{
    return m_Ram;
}


void PlatformHardware::setRam(int64_t value)
{
    m_Ram = value;
    
}
float PlatformHardware::getDisk() const
{
    return m_Disk;
}


void PlatformHardware::setDisk(float value)
{
    m_Disk = value;
    
}
utility::string_t PlatformHardware::getId() const
{
    return m_Id;
}


void PlatformHardware::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PlatformHardware::idIsSet() const
{
    return m_IdIsSet;
}

void PlatformHardware::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}
}

