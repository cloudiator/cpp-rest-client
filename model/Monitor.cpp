/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Monitor.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Monitor::Monitor()
{
    m_Metric = utility::conversions::to_string_t("");
    m_TargetsIsSet = false;
    m_SensorIsSet = false;
    m_SinksIsSet = false;
    m_TagsIsSet = false;
}

Monitor::~Monitor()
{
}

void Monitor::validate()
{
    // TODO: implement validation
}

web::json::value Monitor::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("metric")] = ModelBase::toJson(m_Metric);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Targets )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("targets")] = web::json::value::array(jsonArray);
        }
    }
    if(m_SensorIsSet)
    {
        val[utility::conversions::to_string_t("sensor")] = ModelBase::toJson(m_Sensor);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Sinks )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("sinks")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("tags")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Monitor::fromJson(web::json::value& val)
{
    setMetric(ModelBase::stringFromJson(val[utility::conversions::to_string_t("metric")]));
    {
        m_Targets.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("targets")))
        {
        for( auto& item : val[utility::conversions::to_string_t("targets")].as_array() )
        {
            if(item.is_null())
            {
                m_Targets.push_back( std::shared_ptr<MonitoringTarget>(nullptr) );
            }
            else
            {
                std::shared_ptr<MonitoringTarget> newItem(new MonitoringTarget());
                newItem->fromJson(item);
                m_Targets.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sensor")))
    {
        if(!val[utility::conversions::to_string_t("sensor")].is_null())
        {
            std::shared_ptr<Sensor> newItem(new Sensor());
            newItem->fromJson(val[utility::conversions::to_string_t("sensor")]);
            setSensor( newItem );
        }
    }
    {
        m_Sinks.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("sinks")))
        {
        for( auto& item : val[utility::conversions::to_string_t("sinks")].as_array() )
        {
            if(item.is_null())
            {
                m_Sinks.push_back( std::shared_ptr<DataSink>(nullptr) );
            }
            else
            {
                std::shared_ptr<DataSink> newItem(new DataSink());
                newItem->fromJson(item);
                m_Sinks.push_back( newItem );
            }
        }
        }
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("tags")))
        {
        for( auto& item : val[utility::conversions::to_string_t("tags")].as_array() )
        {
            if(item.is_null())
            {
                m_Tags.push_back( std::shared_ptr<MonitoringTag>(nullptr) );
            }
            else
            {
                std::shared_ptr<MonitoringTag> newItem(new MonitoringTag());
                newItem->fromJson(item);
                m_Tags.push_back( newItem );
            }
        }
        }
    }
}

void Monitor::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metric"), m_Metric));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Targets )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targets"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_SensorIsSet)
    {
        if (m_Sensor.get())
        {
            m_Sensor->toMultipart(multipart, utility::conversions::to_string_t("sensor."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Sinks )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sinks"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Monitor::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setMetric(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("metric"))));
    {
        m_Targets.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("targets")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("targets"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Targets.push_back( std::shared_ptr<MonitoringTarget>(nullptr) );
            }
            else
            {
                std::shared_ptr<MonitoringTarget> newItem(new MonitoringTarget());
                newItem->fromJson(item);
                m_Targets.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sensor")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sensor")))
        {
            std::shared_ptr<Sensor> newItem(new Sensor());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sensor."));
            setSensor( newItem );
        }
    }
    {
        m_Sinks.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("sinks")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sinks"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Sinks.push_back( std::shared_ptr<DataSink>(nullptr) );
            }
            else
            {
                std::shared_ptr<DataSink> newItem(new DataSink());
                newItem->fromJson(item);
                m_Sinks.push_back( newItem );
            }
        }
        }
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Tags.push_back( std::shared_ptr<MonitoringTag>(nullptr) );
            }
            else
            {
                std::shared_ptr<MonitoringTag> newItem(new MonitoringTag());
                newItem->fromJson(item);
                m_Tags.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t Monitor::getMetric() const
{
    return m_Metric;
}


void Monitor::setMetric(utility::string_t value)
{
    m_Metric = value;
    
}
std::vector<std::shared_ptr<MonitoringTarget>>& Monitor::getTargets()
{
    return m_Targets;
}

void Monitor::setTargets(std::vector<std::shared_ptr<MonitoringTarget>> value)
{
    m_Targets = value;
    m_TargetsIsSet = true;
}
bool Monitor::targetsIsSet() const
{
    return m_TargetsIsSet;
}

void Monitor::unsetTargets()
{
    m_TargetsIsSet = false;
}

std::shared_ptr<Sensor> Monitor::getSensor() const
{
    return m_Sensor;
}


void Monitor::setSensor(std::shared_ptr<Sensor> value)
{
    m_Sensor = value;
    m_SensorIsSet = true;
}
bool Monitor::sensorIsSet() const
{
    return m_SensorIsSet;
}

void Monitor::unsetSensor()
{
    m_SensorIsSet = false;
}

std::vector<std::shared_ptr<DataSink>>& Monitor::getSinks()
{
    return m_Sinks;
}

void Monitor::setSinks(std::vector<std::shared_ptr<DataSink>> value)
{
    m_Sinks = value;
    m_SinksIsSet = true;
}
bool Monitor::sinksIsSet() const
{
    return m_SinksIsSet;
}

void Monitor::unsetSinks()
{
    m_SinksIsSet = false;
}

std::vector<std::shared_ptr<MonitoringTag>>& Monitor::getTags()
{
    return m_Tags;
}

void Monitor::setTags(std::vector<std::shared_ptr<MonitoringTag>> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool Monitor::tagsIsSet() const
{
    return m_TagsIsSet;
}

void Monitor::unsetTags()
{
    m_TagsIsSet = false;
}

}
}
}
}
}

