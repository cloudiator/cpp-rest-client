/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NodeGroup.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

NodeGroup::NodeGroup()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_NodesIsSet = false;
}

NodeGroup::~NodeGroup()
{
}

void NodeGroup::validate()
{
    // TODO: implement validation
}

web::json::value NodeGroup::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Nodes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("nodes")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void NodeGroup::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
    {
        m_Nodes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("nodes")))
        {
        for( auto& item : val[utility::conversions::to_string_t("nodes")].as_array() )
        {
            if(item.is_null())
            {
                m_Nodes.push_back( std::shared_ptr<Node>(nullptr) );
            }
            else
            {
                std::shared_ptr<Node> newItem(new Node());
                newItem->fromJson(item);
                m_Nodes.push_back( newItem );
            }
        }
        }
    }
}

void NodeGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Nodes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void NodeGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    {
        m_Nodes.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("nodes")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodes"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Nodes.push_back( std::shared_ptr<Node>(nullptr) );
            }
            else
            {
                std::shared_ptr<Node> newItem(new Node());
                newItem->fromJson(item);
                m_Nodes.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t NodeGroup::getId() const
{
    return m_Id;
}


void NodeGroup::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool NodeGroup::idIsSet() const
{
    return m_IdIsSet;
}

void NodeGroup::unsetId()
{
    m_IdIsSet = false;
}

std::vector<std::shared_ptr<Node>>& NodeGroup::getNodes()
{
    return m_Nodes;
}

void NodeGroup::setNodes(std::vector<std::shared_ptr<Node>> value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}
bool NodeGroup::nodesIsSet() const
{
    return m_NodesIsSet;
}

void NodeGroup::unsetNodes()
{
    m_NodesIsSet = false;
}

}
}
}
}
}

