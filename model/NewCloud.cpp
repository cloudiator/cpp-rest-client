/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NewCloud.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

NewCloud::NewCloud()
{
    m_Endpoint = utility::conversions::to_string_t("");
    m_EndpointIsSet = false;
    m_CloudConfigurationIsSet = false;
}

NewCloud::~NewCloud()
{
}

void NewCloud::validate()
{
    // TODO: implement validation
}

web::json::value NewCloud::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EndpointIsSet)
    {
        val[utility::conversions::to_string_t("endpoint")] = ModelBase::toJson(m_Endpoint);
    }
    val[utility::conversions::to_string_t("cloudType")] = ModelBase::toJson(m_CloudType);
    val[utility::conversions::to_string_t("api")] = ModelBase::toJson(m_Api);
    val[utility::conversions::to_string_t("credential")] = ModelBase::toJson(m_Credential);
    if(m_CloudConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("cloudConfiguration")] = ModelBase::toJson(m_CloudConfiguration);
    }

    return val;
}

void NewCloud::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("endpoint")))
    {
        setEndpoint(ModelBase::stringFromJson(val[utility::conversions::to_string_t("endpoint")]));
    }
    std::shared_ptr<CloudType> newCloudType(new CloudType());
    newCloudType->fromJson(val[utility::conversions::to_string_t("cloudType")]);
    setCloudType( newCloudType );
    std::shared_ptr<Api> newApi(new Api());
    newApi->fromJson(val[utility::conversions::to_string_t("api")]);
    setApi( newApi );
    std::shared_ptr<CloudCredential> newCredential(new CloudCredential());
    newCredential->fromJson(val[utility::conversions::to_string_t("credential")]);
    setCredential( newCredential );
    if(val.has_field(utility::conversions::to_string_t("cloudConfiguration")))
    {
        if(!val[utility::conversions::to_string_t("cloudConfiguration")].is_null())
        {
            std::shared_ptr<CloudConfiguration> newItem(new CloudConfiguration());
            newItem->fromJson(val[utility::conversions::to_string_t("cloudConfiguration")]);
            setCloudConfiguration( newItem );
        }
    }
}

void NewCloud::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EndpointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endpoint"), m_Endpoint));
        
    }
    m_CloudType->toMultipart(multipart, utility::conversions::to_string_t("cloudType."));
    m_Api->toMultipart(multipart, utility::conversions::to_string_t("api."));
    m_Credential->toMultipart(multipart, utility::conversions::to_string_t("credential."));
    if(m_CloudConfigurationIsSet)
    {
        if (m_CloudConfiguration.get())
        {
            m_CloudConfiguration->toMultipart(multipart, utility::conversions::to_string_t("cloudConfiguration."));
        }
        
    }
}

void NewCloud::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("endpoint")))
    {
        setEndpoint(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("endpoint"))));
    }
    std::shared_ptr<CloudType> newCloudType(new CloudType());
    newCloudType->fromMultiPart(multipart, utility::conversions::to_string_t("cloudType."));
    setCloudType( newCloudType );
    std::shared_ptr<Api> newApi(new Api());
    newApi->fromMultiPart(multipart, utility::conversions::to_string_t("api."));
    setApi( newApi );
    std::shared_ptr<CloudCredential> newCredential(new CloudCredential());
    newCredential->fromMultiPart(multipart, utility::conversions::to_string_t("credential."));
    setCredential( newCredential );
    if(multipart->hasContent(utility::conversions::to_string_t("cloudConfiguration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cloudConfiguration")))
        {
            std::shared_ptr<CloudConfiguration> newItem(new CloudConfiguration());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cloudConfiguration."));
            setCloudConfiguration( newItem );
        }
    }
}

utility::string_t NewCloud::getEndpoint() const
{
    return m_Endpoint;
}


void NewCloud::setEndpoint(utility::string_t value)
{
    m_Endpoint = value;
    m_EndpointIsSet = true;
}
bool NewCloud::endpointIsSet() const
{
    return m_EndpointIsSet;
}

void NewCloud::unsetEndpoint()
{
    m_EndpointIsSet = false;
}

std::shared_ptr<CloudType> NewCloud::getCloudType() const
{
    return m_CloudType;
}


void NewCloud::setCloudType(std::shared_ptr<CloudType> value)
{
    m_CloudType = value;
    
}
std::shared_ptr<Api> NewCloud::getApi() const
{
    return m_Api;
}


void NewCloud::setApi(std::shared_ptr<Api> value)
{
    m_Api = value;
    
}
std::shared_ptr<CloudCredential> NewCloud::getCredential() const
{
    return m_Credential;
}


void NewCloud::setCredential(std::shared_ptr<CloudCredential> value)
{
    m_Credential = value;
    
}
std::shared_ptr<CloudConfiguration> NewCloud::getCloudConfiguration() const
{
    return m_CloudConfiguration;
}


void NewCloud::setCloudConfiguration(std::shared_ptr<CloudConfiguration> value)
{
    m_CloudConfiguration = value;
    m_CloudConfigurationIsSet = true;
}
bool NewCloud::cloudConfigurationIsSet() const
{
    return m_CloudConfigurationIsSet;
}

void NewCloud::unsetCloudConfiguration()
{
    m_CloudConfigurationIsSet = false;
}

}
}
}
}
}

