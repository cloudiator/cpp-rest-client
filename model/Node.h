/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Node.h
 *
 * 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_Node_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_Node_H_


#include "../ModelBase.h"

#include "IpAddress.h"
#include "NodeProperties.h"
#include <cpprest/details/basic_types.h>
#include "LoginCredential.h"
#include <vector>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// 
/// </summary>
class  Node
    : public ModelBase
{
public:
    Node();
    virtual ~Node();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Node members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();
    void setNodeId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LoginCredential> getLoginCredential() const;
    bool loginCredentialIsSet() const;
    void unsetLoginCredential();
    void setLoginCredential(std::shared_ptr<LoginCredential> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeType() const;
    bool nodeTypeIsSet() const;
    void unsetNodeType();
    void setNodeType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<IpAddress>>& getIpAddresses();
    bool ipAddressesIsSet() const;
    void unsetIpAddresses();
    void setIpAddresses(std::vector<std::shared_ptr<IpAddress>> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NodeProperties> getNodeProperties() const;
    bool nodePropertiesIsSet() const;
    void unsetNodeProperties();
    void setNodeProperties(std::shared_ptr<NodeProperties> value);

protected:
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<LoginCredential> m_LoginCredential;
    bool m_LoginCredentialIsSet;
    utility::string_t m_NodeType;
    bool m_NodeTypeIsSet;
    std::vector<std::shared_ptr<IpAddress>> m_IpAddresses;
    bool m_IpAddressesIsSet;
    std::shared_ptr<NodeProperties> m_NodeProperties;
    bool m_NodePropertiesIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_Node_H_ */
