/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DockerInterface.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

DockerInterface::DockerInterface()
{
    m_DockerImage = utility::conversions::to_string_t("");
    m_DockerImageIsSet = false;
    m_EnvironmentIsSet = false;
}

DockerInterface::~DockerInterface()
{
}

void DockerInterface::validate()
{
    // TODO: implement validation
}

web::json::value DockerInterface::toJson() const
{
    web::json::value val = this->TaskInterface::toJson();

    if(m_DockerImageIsSet)
    {
        val[utility::conversions::to_string_t("dockerImage")] = ModelBase::toJson(m_DockerImage);
    }
    if(m_EnvironmentIsSet)
    {
        val[utility::conversions::to_string_t("environment")] = ModelBase::toJson(m_Environment);
    }

    return val;
}

void DockerInterface::fromJson(web::json::value& val)
{
    this->TaskInterface::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("dockerImage")))
    {
        setDockerImage(ModelBase::stringFromJson(val[utility::conversions::to_string_t("dockerImage")]));
    }
    if(val.has_field(utility::conversions::to_string_t("environment")))
    {
        if(!val[utility::conversions::to_string_t("environment")].is_null())
        {
            std::shared_ptr<Map> newItem(new Map());
            newItem->fromJson(val[utility::conversions::to_string_t("environment")]);
            setEnvironment( newItem );
        }
    }
}

void DockerInterface::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    if(m_DockerImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dockerImage"), m_DockerImage));
        
    }
    if(m_EnvironmentIsSet)
    {
        if (m_Environment.get())
        {
            m_Environment->toMultipart(multipart, utility::conversions::to_string_t("environment."));
        }
        
    }
}

void DockerInterface::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    if(multipart->hasContent(utility::conversions::to_string_t("dockerImage")))
    {
        setDockerImage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dockerImage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("environment")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("environment")))
        {
            std::shared_ptr<Map> newItem(new Map());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("environment."));
            setEnvironment( newItem );
        }
    }
}

utility::string_t DockerInterface::getDockerImage() const
{
    return m_DockerImage;
}


void DockerInterface::setDockerImage(utility::string_t value)
{
    m_DockerImage = value;
    m_DockerImageIsSet = true;
}
bool DockerInterface::dockerImageIsSet() const
{
    return m_DockerImageIsSet;
}

void DockerInterface::unsetDockerImage()
{
    m_DockerImageIsSet = false;
}

std::shared_ptr<Map> DockerInterface::getEnvironment() const
{
    return m_Environment;
}


void DockerInterface::setEnvironment(std::shared_ptr<Map> value)
{
    m_Environment = value;
    m_EnvironmentIsSet = true;
}
bool DockerInterface::environmentIsSet() const
{
    return m_EnvironmentIsSet;
}

void DockerInterface::unsetEnvironment()
{
    m_EnvironmentIsSet = false;
}

}
}
}
}
}

