/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VirtualMachineRequest.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

VirtualMachineRequest::VirtualMachineRequest()
{
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_Hardware = utility::conversions::to_string_t("");
    m_HardwareIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
}

VirtualMachineRequest::~VirtualMachineRequest()
{
}

void VirtualMachineRequest::validate()
{
    // TODO: implement validation
}

web::json::value VirtualMachineRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_HardwareIsSet)
    {
        val[utility::conversions::to_string_t("hardware")] = ModelBase::toJson(m_Hardware);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }

    return val;
}

void VirtualMachineRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        setImage(ModelBase::stringFromJson(val[utility::conversions::to_string_t("image")]));
    }
    if(val.has_field(utility::conversions::to_string_t("hardware")))
    {
        setHardware(ModelBase::stringFromJson(val[utility::conversions::to_string_t("hardware")]));
    }
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        setLocation(ModelBase::stringFromJson(val[utility::conversions::to_string_t("location")]));
    }
}

void VirtualMachineRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("image"), m_Image));
        
    }
    if(m_HardwareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hardware"), m_Hardware));
        
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("location"), m_Location));
        
    }
}

void VirtualMachineRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        setImage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("image"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hardware")))
    {
        setHardware(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hardware"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        setLocation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("location"))));
    }
}

utility::string_t VirtualMachineRequest::getImage() const
{
    return m_Image;
}


void VirtualMachineRequest::setImage(utility::string_t value)
{
    m_Image = value;
    m_ImageIsSet = true;
}
bool VirtualMachineRequest::imageIsSet() const
{
    return m_ImageIsSet;
}

void VirtualMachineRequest::unsetImage()
{
    m_ImageIsSet = false;
}

utility::string_t VirtualMachineRequest::getHardware() const
{
    return m_Hardware;
}


void VirtualMachineRequest::setHardware(utility::string_t value)
{
    m_Hardware = value;
    m_HardwareIsSet = true;
}
bool VirtualMachineRequest::hardwareIsSet() const
{
    return m_HardwareIsSet;
}

void VirtualMachineRequest::unsetHardware()
{
    m_HardwareIsSet = false;
}

utility::string_t VirtualMachineRequest::getLocation() const
{
    return m_Location;
}


void VirtualMachineRequest::setLocation(utility::string_t value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool VirtualMachineRequest::locationIsSet() const
{
    return m_LocationIsSet;
}

void VirtualMachineRequest::unsetLocation()
{
    m_LocationIsSet = false;
}

}
}
}
}
}

