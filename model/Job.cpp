/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Job.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Job::Job()
{
    m_Name = utility::conversions::to_string_t("");
    m_TasksIsSet = false;
    m_CommunicationsIsSet = false;
    m_RequirementsIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

Job::~Job()
{
}

void Job::validate()
{
    // TODO: implement validation
}

web::json::value Job::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tasks )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("tasks")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Communications )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("communications")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Requirements )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("requirements")] = web::json::value::array(jsonArray);
        }
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

void Job::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    {
        m_Tasks.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("tasks")))
        {
        for( auto& item : val[utility::conversions::to_string_t("tasks")].as_array() )
        {
            if(item.is_null())
            {
                m_Tasks.push_back( std::shared_ptr<Task>(nullptr) );
            }
            else
            {
                std::shared_ptr<Task> newItem(new Task());
                newItem->fromJson(item);
                m_Tasks.push_back( newItem );
            }
        }
        }
    }
    {
        m_Communications.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("communications")))
        {
        for( auto& item : val[utility::conversions::to_string_t("communications")].as_array() )
        {
            if(item.is_null())
            {
                m_Communications.push_back( std::shared_ptr<Communication>(nullptr) );
            }
            else
            {
                std::shared_ptr<Communication> newItem(new Communication());
                newItem->fromJson(item);
                m_Communications.push_back( newItem );
            }
        }
        }
    }
    {
        m_Requirements.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("requirements")))
        {
        for( auto& item : val[utility::conversions::to_string_t("requirements")].as_array() )
        {
            if(item.is_null())
            {
                m_Requirements.push_back( std::shared_ptr<Requirement>(nullptr) );
            }
            else
            {
                std::shared_ptr<Requirement> newItem(new Requirement());
                newItem->fromJson(item);
                m_Requirements.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
}

void Job::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tasks )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tasks"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Communications )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("communications"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Requirements )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requirements"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
}

void Job::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    {
        m_Tasks.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("tasks")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tasks"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Tasks.push_back( std::shared_ptr<Task>(nullptr) );
            }
            else
            {
                std::shared_ptr<Task> newItem(new Task());
                newItem->fromJson(item);
                m_Tasks.push_back( newItem );
            }
        }
        }
    }
    {
        m_Communications.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("communications")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("communications"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Communications.push_back( std::shared_ptr<Communication>(nullptr) );
            }
            else
            {
                std::shared_ptr<Communication> newItem(new Communication());
                newItem->fromJson(item);
                m_Communications.push_back( newItem );
            }
        }
        }
    }
    {
        m_Requirements.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("requirements")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("requirements"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Requirements.push_back( std::shared_ptr<Requirement>(nullptr) );
            }
            else
            {
                std::shared_ptr<Requirement> newItem(new Requirement());
                newItem->fromJson(item);
                m_Requirements.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
}

utility::string_t Job::getName() const
{
    return m_Name;
}


void Job::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<std::shared_ptr<Task>>& Job::getTasks()
{
    return m_Tasks;
}

void Job::setTasks(std::vector<std::shared_ptr<Task>> value)
{
    m_Tasks = value;
    m_TasksIsSet = true;
}
bool Job::tasksIsSet() const
{
    return m_TasksIsSet;
}

void Job::unsetTasks()
{
    m_TasksIsSet = false;
}

std::vector<std::shared_ptr<Communication>>& Job::getCommunications()
{
    return m_Communications;
}

void Job::setCommunications(std::vector<std::shared_ptr<Communication>> value)
{
    m_Communications = value;
    m_CommunicationsIsSet = true;
}
bool Job::communicationsIsSet() const
{
    return m_CommunicationsIsSet;
}

void Job::unsetCommunications()
{
    m_CommunicationsIsSet = false;
}

std::vector<std::shared_ptr<Requirement>>& Job::getRequirements()
{
    return m_Requirements;
}

void Job::setRequirements(std::vector<std::shared_ptr<Requirement>> value)
{
    m_Requirements = value;
    m_RequirementsIsSet = true;
}
bool Job::requirementsIsSet() const
{
    return m_RequirementsIsSet;
}

void Job::unsetRequirements()
{
    m_RequirementsIsSet = false;
}

utility::string_t Job::getId() const
{
    return m_Id;
}


void Job::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Job::idIsSet() const
{
    return m_IdIsSet;
}

void Job::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}
}

