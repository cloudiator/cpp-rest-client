/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Interval.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Interval::Interval()
{
    m_Unit = utility::conversions::to_string_t("");
    m_UnitIsSet = false;
    m_Period = 0L;
    m_PeriodIsSet = false;
}

Interval::~Interval()
{
}

void Interval::validate()
{
    // TODO: implement validation
}

web::json::value Interval::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UnitIsSet)
    {
        val[utility::conversions::to_string_t("unit")] = ModelBase::toJson(m_Unit);
    }
    if(m_PeriodIsSet)
    {
        val[utility::conversions::to_string_t("period")] = ModelBase::toJson(m_Period);
    }

    return val;
}

void Interval::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("unit")))
    {
        setUnit(ModelBase::stringFromJson(val[utility::conversions::to_string_t("unit")]));
    }
    if(val.has_field(utility::conversions::to_string_t("period")))
    {
        setPeriod(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("period")]));
    }
}

void Interval::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unit"), m_Unit));
        
    }
    if(m_PeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("period"), m_Period));
    }
}

void Interval::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("unit")))
    {
        setUnit(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("period")))
    {
        setPeriod(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("period"))));
    }
}

utility::string_t Interval::getUnit() const
{
    return m_Unit;
}


void Interval::setUnit(utility::string_t value)
{
    m_Unit = value;
    m_UnitIsSet = true;
}
bool Interval::unitIsSet() const
{
    return m_UnitIsSet;
}

void Interval::unsetUnit()
{
    m_UnitIsSet = false;
}

int64_t Interval::getPeriod() const
{
    return m_Period;
}


void Interval::setPeriod(int64_t value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}
bool Interval::periodIsSet() const
{
    return m_PeriodIsSet;
}

void Interval::unsetPeriod()
{
    m_PeriodIsSet = false;
}

}
}
}
}
}

