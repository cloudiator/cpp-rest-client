/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PlatformRuntime.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

PlatformRuntime::PlatformRuntime()
{
    m_Name = utility::conversions::to_string_t("");
    m_Language = utility::conversions::to_string_t("");
    m_LanguageVersion = 0.0;
    m_LanguageVersionIsSet = false;
    m_RuntimeType = utility::conversions::to_string_t("");
    m_Version = 0.0;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

PlatformRuntime::~PlatformRuntime()
{
}

void PlatformRuntime::validate()
{
    // TODO: implement validation
}

web::json::value PlatformRuntime::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("language")] = ModelBase::toJson(m_Language);
    if(m_LanguageVersionIsSet)
    {
        val[utility::conversions::to_string_t("languageVersion")] = ModelBase::toJson(m_LanguageVersion);
    }
    val[utility::conversions::to_string_t("runtimeType")] = ModelBase::toJson(m_RuntimeType);
    val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

void PlatformRuntime::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setLanguage(ModelBase::stringFromJson(val[utility::conversions::to_string_t("language")]));
    if(val.has_field(utility::conversions::to_string_t("languageVersion")))
    {
        setLanguageVersion(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("languageVersion")]));
    }
    setRuntimeType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("runtimeType")]));
    setVersion(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("version")]));
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
}

void PlatformRuntime::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("language"), m_Language));
    if(m_LanguageVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("languageVersion"), m_LanguageVersion));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("runtimeType"), m_RuntimeType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
}

void PlatformRuntime::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setLanguage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("language"))));
    if(multipart->hasContent(utility::conversions::to_string_t("languageVersion")))
    {
        setLanguageVersion(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("languageVersion"))));
    }
    setRuntimeType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("runtimeType"))));
    setVersion(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("version"))));
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
}

utility::string_t PlatformRuntime::getName() const
{
    return m_Name;
}


void PlatformRuntime::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t PlatformRuntime::getLanguage() const
{
    return m_Language;
}


void PlatformRuntime::setLanguage(utility::string_t value)
{
    m_Language = value;
    
}
double PlatformRuntime::getLanguageVersion() const
{
    return m_LanguageVersion;
}


void PlatformRuntime::setLanguageVersion(double value)
{
    m_LanguageVersion = value;
    m_LanguageVersionIsSet = true;
}
bool PlatformRuntime::languageVersionIsSet() const
{
    return m_LanguageVersionIsSet;
}

void PlatformRuntime::unsetLanguageVersion()
{
    m_LanguageVersionIsSet = false;
}

utility::string_t PlatformRuntime::getRuntimeType() const
{
    return m_RuntimeType;
}


void PlatformRuntime::setRuntimeType(utility::string_t value)
{
    m_RuntimeType = value;
    
}
double PlatformRuntime::getVersion() const
{
    return m_Version;
}


void PlatformRuntime::setVersion(double value)
{
    m_Version = value;
    
}
utility::string_t PlatformRuntime::getId() const
{
    return m_Id;
}


void PlatformRuntime::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PlatformRuntime::idIsSet() const
{
    return m_IdIsSet;
}

void PlatformRuntime::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}
}

