/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MonitoringTag.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

MonitoringTag::MonitoringTag()
{
    m_Key = utility::conversions::to_string_t("");
    m_KeyIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

MonitoringTag::~MonitoringTag()
{
}

void MonitoringTag::validate()
{
    // TODO: implement validation
}

web::json::value MonitoringTag::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_KeyIsSet)
    {
        val[utility::conversions::to_string_t("key")] = ModelBase::toJson(m_Key);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

void MonitoringTag::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("key")))
    {
        setKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("key")]));
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::stringFromJson(val[utility::conversions::to_string_t("value")]));
    }
}

void MonitoringTag::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_KeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("key"), m_Key));
        
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
        
    }
}

void MonitoringTag::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("key")))
    {
        setKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("key"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    }
}

utility::string_t MonitoringTag::getKey() const
{
    return m_Key;
}


void MonitoringTag::setKey(utility::string_t value)
{
    m_Key = value;
    m_KeyIsSet = true;
}
bool MonitoringTag::keyIsSet() const
{
    return m_KeyIsSet;
}

void MonitoringTag::unsetKey()
{
    m_KeyIsSet = false;
}

utility::string_t MonitoringTag::getValue() const
{
    return m_Value;
}


void MonitoringTag::setValue(utility::string_t value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool MonitoringTag::valueIsSet() const
{
    return m_ValueIsSet;
}

void MonitoringTag::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}
}

