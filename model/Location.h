/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Location.h
 *
 * Repesents a (virtual) location offers by a cloud 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_Location_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_Location_H_


#include "../ModelBase.h"

#include "GeoLocation.h"
#include <cpprest/details/basic_types.h>
#include "Location.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// Repesents a (virtual) location offers by a cloud 
/// </summary>
class  Location
    : public ModelBase
{
public:
    Location();
    virtual ~Location();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Location members

    /// <summary>
    /// Unique identifier
    /// </summary>
    utility::string_t getId() const;
        void setId(utility::string_t value);
    /// <summary>
    /// Human-readable name
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// Original id issued by the provider
    /// </summary>
    utility::string_t getProviderId() const;
        void setProviderId(utility::string_t value);
    /// <summary>
    /// Scope of the location
    /// </summary>
    utility::string_t getLocationScope() const;
        void setLocationScope(utility::string_t value);
    /// <summary>
    /// True of the location can be used to start virtual machines, false if not
    /// </summary>
    bool isIsAssignable() const;
        void setIsAssignable(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GeoLocation> getGeoLocation() const;
    bool geoLocationIsSet() const;
    void unsetGeoLocation();
    void setGeoLocation(std::shared_ptr<GeoLocation> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Location> getParent() const;
    bool parentIsSet() const;
    void unsetParent();
    void setParent(std::shared_ptr<Location> value);

protected:
    utility::string_t m_Id;
        utility::string_t m_Name;
        utility::string_t m_ProviderId;
        utility::string_t m_LocationScope;
        bool m_IsAssignable;
        std::shared_ptr<GeoLocation> m_GeoLocation;
    bool m_GeoLocationIsSet;
    std::shared_ptr<Location> m_Parent;
    bool m_ParentIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_Location_H_ */
