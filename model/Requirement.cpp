/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Requirement.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Requirement::Requirement()
{
    m_Type = utility::conversions::to_string_t("");
}

Requirement::~Requirement()
{
}

void Requirement::validate()
{
    // TODO: implement validation
}

web::json::value Requirement::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);

    return val;
}

void Requirement::fromJson(web::json::value& val)
{
    setType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("type")]));
}

void Requirement::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
}

void Requirement::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
}

utility::string_t Requirement::getType() const
{
    return m_Type;
}


void Requirement::setType(utility::string_t value)
{
    m_Type = value;
    
}
}
}
}
}
}

