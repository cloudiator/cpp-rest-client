/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NewPlatform.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

NewPlatform::NewPlatform()
{
    m_Name = utility::conversions::to_string_t("");
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Endpoint = utility::conversions::to_string_t("");
    m_EndpointIsSet = false;
}

NewPlatform::~NewPlatform()
{
}

void NewPlatform::validate()
{
    // TODO: implement validation
}

web::json::value NewPlatform::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    val[utility::conversions::to_string_t("api")] = ModelBase::toJson(m_Api);
    val[utility::conversions::to_string_t("credential")] = ModelBase::toJson(m_Credential);
    if(m_EndpointIsSet)
    {
        val[utility::conversions::to_string_t("endpoint")] = ModelBase::toJson(m_Endpoint);
    }

    return val;
}

void NewPlatform::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("type")]));
    }
    std::shared_ptr<Api> newApi(new Api());
    newApi->fromJson(val[utility::conversions::to_string_t("api")]);
    setApi( newApi );
    std::shared_ptr<CloudCredential> newCredential(new CloudCredential());
    newCredential->fromJson(val[utility::conversions::to_string_t("credential")]);
    setCredential( newCredential );
    if(val.has_field(utility::conversions::to_string_t("endpoint")))
    {
        setEndpoint(ModelBase::stringFromJson(val[utility::conversions::to_string_t("endpoint")]));
    }
}

void NewPlatform::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    m_Api->toMultipart(multipart, utility::conversions::to_string_t("api."));
    m_Credential->toMultipart(multipart, utility::conversions::to_string_t("credential."));
    if(m_EndpointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endpoint"), m_Endpoint));
        
    }
}

void NewPlatform::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    std::shared_ptr<Api> newApi(new Api());
    newApi->fromMultiPart(multipart, utility::conversions::to_string_t("api."));
    setApi( newApi );
    std::shared_ptr<CloudCredential> newCredential(new CloudCredential());
    newCredential->fromMultiPart(multipart, utility::conversions::to_string_t("credential."));
    setCredential( newCredential );
    if(multipart->hasContent(utility::conversions::to_string_t("endpoint")))
    {
        setEndpoint(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("endpoint"))));
    }
}

utility::string_t NewPlatform::getName() const
{
    return m_Name;
}


void NewPlatform::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t NewPlatform::getType() const
{
    return m_Type;
}


void NewPlatform::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool NewPlatform::typeIsSet() const
{
    return m_TypeIsSet;
}

void NewPlatform::unsetType()
{
    m_TypeIsSet = false;
}

std::shared_ptr<Api> NewPlatform::getApi() const
{
    return m_Api;
}


void NewPlatform::setApi(std::shared_ptr<Api> value)
{
    m_Api = value;
    
}
std::shared_ptr<CloudCredential> NewPlatform::getCredential() const
{
    return m_Credential;
}


void NewPlatform::setCredential(std::shared_ptr<CloudCredential> value)
{
    m_Credential = value;
    
}
utility::string_t NewPlatform::getEndpoint() const
{
    return m_Endpoint;
}


void NewPlatform::setEndpoint(utility::string_t value)
{
    m_Endpoint = value;
    m_EndpointIsSet = true;
}
bool NewPlatform::endpointIsSet() const
{
    return m_EndpointIsSet;
}

void NewPlatform::unsetEndpoint()
{
    m_EndpointIsSet = false;
}

}
}
}
}
}

