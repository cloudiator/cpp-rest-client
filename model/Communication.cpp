/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Communication.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Communication::Communication()
{
    m_PortRequired = utility::conversions::to_string_t("");
    m_PortRequiredIsSet = false;
    m_PortProvided = utility::conversions::to_string_t("");
    m_PortProvidedIsSet = false;
}

Communication::~Communication()
{
}

void Communication::validate()
{
    // TODO: implement validation
}

web::json::value Communication::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PortRequiredIsSet)
    {
        val[utility::conversions::to_string_t("portRequired")] = ModelBase::toJson(m_PortRequired);
    }
    if(m_PortProvidedIsSet)
    {
        val[utility::conversions::to_string_t("portProvided")] = ModelBase::toJson(m_PortProvided);
    }

    return val;
}

void Communication::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("portRequired")))
    {
        setPortRequired(ModelBase::stringFromJson(val[utility::conversions::to_string_t("portRequired")]));
    }
    if(val.has_field(utility::conversions::to_string_t("portProvided")))
    {
        setPortProvided(ModelBase::stringFromJson(val[utility::conversions::to_string_t("portProvided")]));
    }
}

void Communication::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PortRequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("portRequired"), m_PortRequired));
        
    }
    if(m_PortProvidedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("portProvided"), m_PortProvided));
        
    }
}

void Communication::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("portRequired")))
    {
        setPortRequired(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("portRequired"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("portProvided")))
    {
        setPortProvided(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("portProvided"))));
    }
}

utility::string_t Communication::getPortRequired() const
{
    return m_PortRequired;
}


void Communication::setPortRequired(utility::string_t value)
{
    m_PortRequired = value;
    m_PortRequiredIsSet = true;
}
bool Communication::portRequiredIsSet() const
{
    return m_PortRequiredIsSet;
}

void Communication::unsetPortRequired()
{
    m_PortRequiredIsSet = false;
}

utility::string_t Communication::getPortProvided() const
{
    return m_PortProvided;
}


void Communication::setPortProvided(utility::string_t value)
{
    m_PortProvided = value;
    m_PortProvidedIsSet = true;
}
bool Communication::portProvidedIsSet() const
{
    return m_PortProvidedIsSet;
}

void Communication::unsetPortProvided()
{
    m_PortProvidedIsSet = false;
}

}
}
}
}
}

