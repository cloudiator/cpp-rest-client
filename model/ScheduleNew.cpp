/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ScheduleNew.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

ScheduleNew::ScheduleNew()
{
    m_Job = utility::conversions::to_string_t("");
    m_JobIsSet = false;
    m_Instantiation = utility::conversions::to_string_t("");
    m_InstantiationIsSet = false;
}

ScheduleNew::~ScheduleNew()
{
}

void ScheduleNew::validate()
{
    // TODO: implement validation
}

web::json::value ScheduleNew::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_JobIsSet)
    {
        val[utility::conversions::to_string_t("job")] = ModelBase::toJson(m_Job);
    }
    if(m_InstantiationIsSet)
    {
        val[utility::conversions::to_string_t("instantiation")] = ModelBase::toJson(m_Instantiation);
    }

    return val;
}

void ScheduleNew::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("job")))
    {
        setJob(ModelBase::stringFromJson(val[utility::conversions::to_string_t("job")]));
    }
    if(val.has_field(utility::conversions::to_string_t("instantiation")))
    {
        setInstantiation(ModelBase::stringFromJson(val[utility::conversions::to_string_t("instantiation")]));
    }
}

void ScheduleNew::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_JobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("job"), m_Job));
        
    }
    if(m_InstantiationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instantiation"), m_Instantiation));
        
    }
}

void ScheduleNew::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("job")))
    {
        setJob(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("job"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instantiation")))
    {
        setInstantiation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("instantiation"))));
    }
}

utility::string_t ScheduleNew::getJob() const
{
    return m_Job;
}


void ScheduleNew::setJob(utility::string_t value)
{
    m_Job = value;
    m_JobIsSet = true;
}
bool ScheduleNew::jobIsSet() const
{
    return m_JobIsSet;
}

void ScheduleNew::unsetJob()
{
    m_JobIsSet = false;
}

utility::string_t ScheduleNew::getInstantiation() const
{
    return m_Instantiation;
}


void ScheduleNew::setInstantiation(utility::string_t value)
{
    m_Instantiation = value;
    m_InstantiationIsSet = true;
}
bool ScheduleNew::instantiationIsSet() const
{
    return m_InstantiationIsSet;
}

void ScheduleNew::unsetInstantiation()
{
    m_InstantiationIsSet = false;
}

}
}
}
}
}

