/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SparkInterface.h
 *
 * Subtype of TaskInterface. Describes how to deploy a Task to Spark. 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_SparkInterface_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_SparkInterface_H_


#include <cpprest/details/basic_types.h>
#include "TaskInterface.h"
#include "Map.h"
#include <vector>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// Subtype of TaskInterface. Describes how to deploy a Task to Spark. 
/// </summary>
class  SparkInterface
    : public TaskInterface
{
public:
    SparkInterface();
    virtual ~SparkInterface();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SparkInterface members

    /// <summary>
    /// An URI where the executable of the Spark Application can be retrieved. Either a URL pointing to a web endpoint, or a locally available file. 
    /// </summary>
    utility::string_t getFile() const;
    bool fileIsSet() const;
    void unsetfile();
    void setFile(utility::string_t value);
    /// <summary>
    /// Optional className of the class containing the main method. Only required for Java. 
    /// </summary>
    utility::string_t getClassName() const;
    bool classNameIsSet() const;
    void unsetClassName();
    void setClassName(utility::string_t value);
    /// <summary>
    /// Array of arguments passed to the application. 
    /// </summary>
    std::vector<utility::string_t>& getArguments();
    bool argumentsIsSet() const;
    void unsetArguments();
    void setArguments(std::vector<utility::string_t> value);
    /// <summary>
    /// Additional Arguments passed to Spark. 
    /// </summary>
    std::shared_ptr<Map> getSparkArguments() const;
    bool sparkArgumentsIsSet() const;
    void unsetSparkArguments();
    void setSparkArguments(std::shared_ptr<Map> value);
    /// <summary>
    /// Spark configuration properties. 
    /// </summary>
    std::shared_ptr<Map> getSparkConfiguration() const;
    bool sparkConfigurationIsSet() const;
    void unsetSparkConfiguration();
    void setSparkConfiguration(std::shared_ptr<Map> value);

protected:
    utility::string_t m_file;
    bool m_fileIsSet;
    utility::string_t m_ClassName;
    bool m_ClassNameIsSet;
    std::vector<utility::string_t> m_Arguments;
    bool m_ArgumentsIsSet;
    std::shared_ptr<Map> m_SparkArguments;
    bool m_SparkArgumentsIsSet;
    std::shared_ptr<Map> m_SparkConfiguration;
    bool m_SparkConfigurationIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_SparkInterface_H_ */
