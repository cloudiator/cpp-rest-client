/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Optimization.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Optimization::Optimization()
{
    m_Type = utility::conversions::to_string_t("");
    m_Objective = utility::conversions::to_string_t("");
    m_ObjectiveIsSet = false;
}

Optimization::~Optimization()
{
}

void Optimization::validate()
{
    // TODO: implement validation
}

web::json::value Optimization::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    if(m_ObjectiveIsSet)
    {
        val[utility::conversions::to_string_t("objective")] = ModelBase::toJson(m_Objective);
    }

    return val;
}

void Optimization::fromJson(web::json::value& val)
{
    setType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("type")]));
    if(val.has_field(utility::conversions::to_string_t("objective")))
    {
        setObjective(ModelBase::stringFromJson(val[utility::conversions::to_string_t("objective")]));
    }
}

void Optimization::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    if(m_ObjectiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objective"), m_Objective));
        
    }
}

void Optimization::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    if(multipart->hasContent(utility::conversions::to_string_t("objective")))
    {
        setObjective(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("objective"))));
    }
}

utility::string_t Optimization::getType() const
{
    return m_Type;
}


void Optimization::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t Optimization::getObjective() const
{
    return m_Objective;
}


void Optimization::setObjective(utility::string_t value)
{
    m_Objective = value;
    m_ObjectiveIsSet = true;
}
bool Optimization::objectiveIsSet() const
{
    return m_ObjectiveIsSet;
}

void Optimization::unsetObjective()
{
    m_ObjectiveIsSet = false;
}

}
}
}
}
}

