/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Queue.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Queue::Queue()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_StatusIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
}

Queue::~Queue()
{
}

void Queue::validate()
{
    // TODO: implement validation
}

web::json::value Queue::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }

    return val;
}

void Queue::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        if(!val[utility::conversions::to_string_t("status")].is_null())
        {
            std::shared_ptr<QueueStatus> newItem(new QueueStatus());
            newItem->fromJson(val[utility::conversions::to_string_t("status")]);
            setStatus( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        setLocation(ModelBase::stringFromJson(val[utility::conversions::to_string_t("location")]));
    }
}

void Queue::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
    if(m_StatusIsSet)
    {
        if (m_Status.get())
        {
            m_Status->toMultipart(multipart, utility::conversions::to_string_t("status."));
        }
        
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("location"), m_Location));
        
    }
}

void Queue::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("status")))
        {
            std::shared_ptr<QueueStatus> newItem(new QueueStatus());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("status."));
            setStatus( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        setLocation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("location"))));
    }
}

utility::string_t Queue::getId() const
{
    return m_Id;
}


void Queue::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Queue::idIsSet() const
{
    return m_IdIsSet;
}

void Queue::unsetId()
{
    m_IdIsSet = false;
}

std::shared_ptr<QueueStatus> Queue::getStatus() const
{
    return m_Status;
}


void Queue::setStatus(std::shared_ptr<QueueStatus> value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Queue::statusIsSet() const
{
    return m_StatusIsSet;
}

void Queue::unsetStatus()
{
    m_StatusIsSet = false;
}

utility::string_t Queue::getLocation() const
{
    return m_Location;
}


void Queue::setLocation(utility::string_t value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool Queue::locationIsSet() const
{
    return m_LocationIsSet;
}

void Queue::unsetLocation()
{
    m_LocationIsSet = false;
}

}
}
}
}
}

