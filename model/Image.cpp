/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Image.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Image::Image()
{
    m_Id = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_ProviderId = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
}

Image::~Image()
{
}

void Image::validate()
{
    // TODO: implement validation
}

web::json::value Image::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("providerId")] = ModelBase::toJson(m_ProviderId);
    val[utility::conversions::to_string_t("operatingSystem")] = ModelBase::toJson(m_OperatingSystem);
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }

    return val;
}

void Image::fromJson(web::json::value& val)
{
    setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setProviderId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("providerId")]));
    std::shared_ptr<OperatingSystem> newOperatingSystem(new OperatingSystem());
    newOperatingSystem->fromJson(val[utility::conversions::to_string_t("operatingSystem")]);
    setOperatingSystem( newOperatingSystem );
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        if(!val[utility::conversions::to_string_t("location")].is_null())
        {
            std::shared_ptr<Location> newItem(new Location());
            newItem->fromJson(val[utility::conversions::to_string_t("location")]);
            setLocation( newItem );
        }
    }
}

void Image::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("providerId"), m_ProviderId));
    m_OperatingSystem->toMultipart(multipart, utility::conversions::to_string_t("operatingSystem."));
    if(m_LocationIsSet)
    {
        if (m_Location.get())
        {
            m_Location->toMultipart(multipart, utility::conversions::to_string_t("location."));
        }
        
    }
}

void Image::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setProviderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("providerId"))));
    std::shared_ptr<OperatingSystem> newOperatingSystem(new OperatingSystem());
    newOperatingSystem->fromMultiPart(multipart, utility::conversions::to_string_t("operatingSystem."));
    setOperatingSystem( newOperatingSystem );
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("location")))
        {
            std::shared_ptr<Location> newItem(new Location());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("location."));
            setLocation( newItem );
        }
    }
}

utility::string_t Image::getId() const
{
    return m_Id;
}


void Image::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t Image::getName() const
{
    return m_Name;
}


void Image::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Image::getProviderId() const
{
    return m_ProviderId;
}


void Image::setProviderId(utility::string_t value)
{
    m_ProviderId = value;
    
}
std::shared_ptr<OperatingSystem> Image::getOperatingSystem() const
{
    return m_OperatingSystem;
}


void Image::setOperatingSystem(std::shared_ptr<OperatingSystem> value)
{
    m_OperatingSystem = value;
    
}
std::shared_ptr<Location> Image::getLocation() const
{
    return m_Location;
}


void Image::setLocation(std::shared_ptr<Location> value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool Image::locationIsSet() const
{
    return m_LocationIsSet;
}

void Image::unsetLocation()
{
    m_LocationIsSet = false;
}

}
}
}
}
}

