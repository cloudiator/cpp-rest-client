/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Error.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Error::Error()
{
    m_Code = 0;
    m_Message = utility::conversions::to_string_t("");
}

Error::~Error()
{
}

void Error::validate()
{
    // TODO: implement validation
}

web::json::value Error::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("code")] = ModelBase::toJson(m_Code);
    val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);

    return val;
}

void Error::fromJson(web::json::value& val)
{
    setCode(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("code")]));
    setMessage(ModelBase::stringFromJson(val[utility::conversions::to_string_t("message")]));
}

void Error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("code"), m_Code));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
}

void Error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("code"))));
    setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
}

int32_t Error::getCode() const
{
    return m_Code;
}


void Error::setCode(int32_t value)
{
    m_Code = value;
    
}
utility::string_t Error::getMessage() const
{
    return m_Message;
}


void Error::setMessage(utility::string_t value)
{
    m_Message = value;
    
}
}
}
}
}
}

