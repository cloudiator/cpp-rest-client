/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GeoLocation.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

GeoLocation::GeoLocation()
{
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

GeoLocation::~GeoLocation()
{
}

void GeoLocation::validate()
{
    // TODO: implement validation
}

web::json::value GeoLocation::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void GeoLocation::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("city")))
    {
        setCity(ModelBase::stringFromJson(val[utility::conversions::to_string_t("city")]));
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        setCountry(ModelBase::stringFromJson(val[utility::conversions::to_string_t("country")]));
    }
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("latitude")]));
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("longitude")]));
    }
}

void GeoLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
        
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
        
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
}

void GeoLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("city")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("city"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude"))));
    }
}

utility::string_t GeoLocation::getCity() const
{
    return m_City;
}


void GeoLocation::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool GeoLocation::cityIsSet() const
{
    return m_CityIsSet;
}

void GeoLocation::unsetCity()
{
    m_CityIsSet = false;
}

utility::string_t GeoLocation::getCountry() const
{
    return m_Country;
}


void GeoLocation::setCountry(utility::string_t value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool GeoLocation::countryIsSet() const
{
    return m_CountryIsSet;
}

void GeoLocation::unsetCountry()
{
    m_CountryIsSet = false;
}

double GeoLocation::getLatitude() const
{
    return m_Latitude;
}


void GeoLocation::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool GeoLocation::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void GeoLocation::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

double GeoLocation::getLongitude() const
{
    return m_Longitude;
}


void GeoLocation::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool GeoLocation::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void GeoLocation::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}
}

