/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LoginCredential.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

LoginCredential::LoginCredential()
{
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_PrivateKey = utility::conversions::to_string_t("");
    m_PrivateKeyIsSet = false;
}

LoginCredential::~LoginCredential()
{
}

void LoginCredential::validate()
{
    // TODO: implement validation
}

web::json::value LoginCredential::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_PrivateKeyIsSet)
    {
        val[utility::conversions::to_string_t("privateKey")] = ModelBase::toJson(m_PrivateKey);
    }

    return val;
}

void LoginCredential::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        setUsername(ModelBase::stringFromJson(val[utility::conversions::to_string_t("username")]));
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        setPassword(ModelBase::stringFromJson(val[utility::conversions::to_string_t("password")]));
    }
    if(val.has_field(utility::conversions::to_string_t("privateKey")))
    {
        setPrivateKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("privateKey")]));
    }
}

void LoginCredential::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
        
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
        
    }
    if(m_PrivateKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("privateKey"), m_PrivateKey));
        
    }
}

void LoginCredential::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("password"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("privateKey")))
    {
        setPrivateKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("privateKey"))));
    }
}

utility::string_t LoginCredential::getUsername() const
{
    return m_Username;
}


void LoginCredential::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool LoginCredential::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void LoginCredential::unsetUsername()
{
    m_UsernameIsSet = false;
}

utility::string_t LoginCredential::getPassword() const
{
    return m_Password;
}


void LoginCredential::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool LoginCredential::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void LoginCredential::unsetPassword()
{
    m_PasswordIsSet = false;
}

utility::string_t LoginCredential::getPrivateKey() const
{
    return m_PrivateKey;
}


void LoginCredential::setPrivateKey(utility::string_t value)
{
    m_PrivateKey = value;
    m_PrivateKeyIsSet = true;
}
bool LoginCredential::privateKeyIsSet() const
{
    return m_PrivateKeyIsSet;
}

void LoginCredential::unsetPrivateKey()
{
    m_PrivateKeyIsSet = false;
}

}
}
}
}
}

