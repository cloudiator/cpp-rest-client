/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LanceInterface.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

LanceInterface::LanceInterface()
{
    m_ContainerType = utility::conversions::to_string_t("");
    m_ContainerTypeIsSet = false;
    m_Init = utility::conversions::to_string_t("");
    m_InitIsSet = false;
    m_PreInstall = utility::conversions::to_string_t("");
    m_PreInstallIsSet = false;
    m_Install = utility::conversions::to_string_t("");
    m_InstallIsSet = false;
    m_PostInstall = utility::conversions::to_string_t("");
    m_PostInstallIsSet = false;
    m_PreStart = utility::conversions::to_string_t("");
    m_PreStartIsSet = false;
    m_Start = utility::conversions::to_string_t("");
    m_StartIsSet = false;
    m_StartDetection = utility::conversions::to_string_t("");
    m_StartDetectionIsSet = false;
    m_StopDetection = utility::conversions::to_string_t("");
    m_StopDetectionIsSet = false;
    m_PostStart = utility::conversions::to_string_t("");
    m_PostStartIsSet = false;
    m_PreStop = utility::conversions::to_string_t("");
    m_PreStopIsSet = false;
    m_Stop = utility::conversions::to_string_t("");
    m_StopIsSet = false;
    m_PostStop = utility::conversions::to_string_t("");
    m_PostStopIsSet = false;
    m_Shutdown = utility::conversions::to_string_t("");
    m_ShutdownIsSet = false;
}

LanceInterface::~LanceInterface()
{
}

void LanceInterface::validate()
{
    // TODO: implement validation
}

web::json::value LanceInterface::toJson() const
{
    web::json::value val = this->TaskInterface::toJson();

    if(m_ContainerTypeIsSet)
    {
        val[utility::conversions::to_string_t("containerType")] = ModelBase::toJson(m_ContainerType);
    }
    if(m_InitIsSet)
    {
        val[utility::conversions::to_string_t("init")] = ModelBase::toJson(m_Init);
    }
    if(m_PreInstallIsSet)
    {
        val[utility::conversions::to_string_t("preInstall")] = ModelBase::toJson(m_PreInstall);
    }
    if(m_InstallIsSet)
    {
        val[utility::conversions::to_string_t("install")] = ModelBase::toJson(m_Install);
    }
    if(m_PostInstallIsSet)
    {
        val[utility::conversions::to_string_t("postInstall")] = ModelBase::toJson(m_PostInstall);
    }
    if(m_PreStartIsSet)
    {
        val[utility::conversions::to_string_t("preStart")] = ModelBase::toJson(m_PreStart);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t("start")] = ModelBase::toJson(m_Start);
    }
    if(m_StartDetectionIsSet)
    {
        val[utility::conversions::to_string_t("startDetection")] = ModelBase::toJson(m_StartDetection);
    }
    if(m_StopDetectionIsSet)
    {
        val[utility::conversions::to_string_t("stopDetection")] = ModelBase::toJson(m_StopDetection);
    }
    if(m_PostStartIsSet)
    {
        val[utility::conversions::to_string_t("postStart")] = ModelBase::toJson(m_PostStart);
    }
    if(m_PreStopIsSet)
    {
        val[utility::conversions::to_string_t("preStop")] = ModelBase::toJson(m_PreStop);
    }
    if(m_StopIsSet)
    {
        val[utility::conversions::to_string_t("stop")] = ModelBase::toJson(m_Stop);
    }
    if(m_PostStopIsSet)
    {
        val[utility::conversions::to_string_t("postStop")] = ModelBase::toJson(m_PostStop);
    }
    if(m_ShutdownIsSet)
    {
        val[utility::conversions::to_string_t("shutdown")] = ModelBase::toJson(m_Shutdown);
    }

    return val;
}

void LanceInterface::fromJson(web::json::value& val)
{
    this->TaskInterface::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("containerType")))
    {
        setContainerType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("containerType")]));
    }
    if(val.has_field(utility::conversions::to_string_t("init")))
    {
        setInit(ModelBase::stringFromJson(val[utility::conversions::to_string_t("init")]));
    }
    if(val.has_field(utility::conversions::to_string_t("preInstall")))
    {
        setPreInstall(ModelBase::stringFromJson(val[utility::conversions::to_string_t("preInstall")]));
    }
    if(val.has_field(utility::conversions::to_string_t("install")))
    {
        setInstall(ModelBase::stringFromJson(val[utility::conversions::to_string_t("install")]));
    }
    if(val.has_field(utility::conversions::to_string_t("postInstall")))
    {
        setPostInstall(ModelBase::stringFromJson(val[utility::conversions::to_string_t("postInstall")]));
    }
    if(val.has_field(utility::conversions::to_string_t("preStart")))
    {
        setPreStart(ModelBase::stringFromJson(val[utility::conversions::to_string_t("preStart")]));
    }
    if(val.has_field(utility::conversions::to_string_t("start")))
    {
        setStart(ModelBase::stringFromJson(val[utility::conversions::to_string_t("start")]));
    }
    if(val.has_field(utility::conversions::to_string_t("startDetection")))
    {
        setStartDetection(ModelBase::stringFromJson(val[utility::conversions::to_string_t("startDetection")]));
    }
    if(val.has_field(utility::conversions::to_string_t("stopDetection")))
    {
        setStopDetection(ModelBase::stringFromJson(val[utility::conversions::to_string_t("stopDetection")]));
    }
    if(val.has_field(utility::conversions::to_string_t("postStart")))
    {
        setPostStart(ModelBase::stringFromJson(val[utility::conversions::to_string_t("postStart")]));
    }
    if(val.has_field(utility::conversions::to_string_t("preStop")))
    {
        setPreStop(ModelBase::stringFromJson(val[utility::conversions::to_string_t("preStop")]));
    }
    if(val.has_field(utility::conversions::to_string_t("stop")))
    {
        setStop(ModelBase::stringFromJson(val[utility::conversions::to_string_t("stop")]));
    }
    if(val.has_field(utility::conversions::to_string_t("postStop")))
    {
        setPostStop(ModelBase::stringFromJson(val[utility::conversions::to_string_t("postStop")]));
    }
    if(val.has_field(utility::conversions::to_string_t("shutdown")))
    {
        setShutdown(ModelBase::stringFromJson(val[utility::conversions::to_string_t("shutdown")]));
    }
}

void LanceInterface::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    if(m_ContainerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("containerType"), m_ContainerType));
        
    }
    if(m_InitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("init"), m_Init));
        
    }
    if(m_PreInstallIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("preInstall"), m_PreInstall));
        
    }
    if(m_InstallIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("install"), m_Install));
        
    }
    if(m_PostInstallIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postInstall"), m_PostInstall));
        
    }
    if(m_PreStartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("preStart"), m_PreStart));
        
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("start"), m_Start));
        
    }
    if(m_StartDetectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startDetection"), m_StartDetection));
        
    }
    if(m_StopDetectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stopDetection"), m_StopDetection));
        
    }
    if(m_PostStartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postStart"), m_PostStart));
        
    }
    if(m_PreStopIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("preStop"), m_PreStop));
        
    }
    if(m_StopIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stop"), m_Stop));
        
    }
    if(m_PostStopIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postStop"), m_PostStop));
        
    }
    if(m_ShutdownIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shutdown"), m_Shutdown));
        
    }
}

void LanceInterface::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    if(multipart->hasContent(utility::conversions::to_string_t("containerType")))
    {
        setContainerType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("containerType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("init")))
    {
        setInit(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("init"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preInstall")))
    {
        setPreInstall(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("preInstall"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("install")))
    {
        setInstall(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("install"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postInstall")))
    {
        setPostInstall(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("postInstall"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preStart")))
    {
        setPreStart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("preStart"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("start")))
    {
        setStart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("start"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startDetection")))
    {
        setStartDetection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startDetection"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stopDetection")))
    {
        setStopDetection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stopDetection"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postStart")))
    {
        setPostStart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("postStart"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preStop")))
    {
        setPreStop(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("preStop"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stop")))
    {
        setStop(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stop"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postStop")))
    {
        setPostStop(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("postStop"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shutdown")))
    {
        setShutdown(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("shutdown"))));
    }
}

utility::string_t LanceInterface::getContainerType() const
{
    return m_ContainerType;
}


void LanceInterface::setContainerType(utility::string_t value)
{
    m_ContainerType = value;
    m_ContainerTypeIsSet = true;
}
bool LanceInterface::containerTypeIsSet() const
{
    return m_ContainerTypeIsSet;
}

void LanceInterface::unsetContainerType()
{
    m_ContainerTypeIsSet = false;
}

utility::string_t LanceInterface::getInit() const
{
    return m_Init;
}


void LanceInterface::setInit(utility::string_t value)
{
    m_Init = value;
    m_InitIsSet = true;
}
bool LanceInterface::initIsSet() const
{
    return m_InitIsSet;
}

void LanceInterface::unsetInit()
{
    m_InitIsSet = false;
}

utility::string_t LanceInterface::getPreInstall() const
{
    return m_PreInstall;
}


void LanceInterface::setPreInstall(utility::string_t value)
{
    m_PreInstall = value;
    m_PreInstallIsSet = true;
}
bool LanceInterface::preInstallIsSet() const
{
    return m_PreInstallIsSet;
}

void LanceInterface::unsetPreInstall()
{
    m_PreInstallIsSet = false;
}

utility::string_t LanceInterface::getInstall() const
{
    return m_Install;
}


void LanceInterface::setInstall(utility::string_t value)
{
    m_Install = value;
    m_InstallIsSet = true;
}
bool LanceInterface::installIsSet() const
{
    return m_InstallIsSet;
}

void LanceInterface::unsetInstall()
{
    m_InstallIsSet = false;
}

utility::string_t LanceInterface::getPostInstall() const
{
    return m_PostInstall;
}


void LanceInterface::setPostInstall(utility::string_t value)
{
    m_PostInstall = value;
    m_PostInstallIsSet = true;
}
bool LanceInterface::postInstallIsSet() const
{
    return m_PostInstallIsSet;
}

void LanceInterface::unsetPostInstall()
{
    m_PostInstallIsSet = false;
}

utility::string_t LanceInterface::getPreStart() const
{
    return m_PreStart;
}


void LanceInterface::setPreStart(utility::string_t value)
{
    m_PreStart = value;
    m_PreStartIsSet = true;
}
bool LanceInterface::preStartIsSet() const
{
    return m_PreStartIsSet;
}

void LanceInterface::unsetPreStart()
{
    m_PreStartIsSet = false;
}

utility::string_t LanceInterface::getStart() const
{
    return m_Start;
}


void LanceInterface::setStart(utility::string_t value)
{
    m_Start = value;
    m_StartIsSet = true;
}
bool LanceInterface::startIsSet() const
{
    return m_StartIsSet;
}

void LanceInterface::unsetStart()
{
    m_StartIsSet = false;
}

utility::string_t LanceInterface::getStartDetection() const
{
    return m_StartDetection;
}


void LanceInterface::setStartDetection(utility::string_t value)
{
    m_StartDetection = value;
    m_StartDetectionIsSet = true;
}
bool LanceInterface::startDetectionIsSet() const
{
    return m_StartDetectionIsSet;
}

void LanceInterface::unsetStartDetection()
{
    m_StartDetectionIsSet = false;
}

utility::string_t LanceInterface::getStopDetection() const
{
    return m_StopDetection;
}


void LanceInterface::setStopDetection(utility::string_t value)
{
    m_StopDetection = value;
    m_StopDetectionIsSet = true;
}
bool LanceInterface::stopDetectionIsSet() const
{
    return m_StopDetectionIsSet;
}

void LanceInterface::unsetStopDetection()
{
    m_StopDetectionIsSet = false;
}

utility::string_t LanceInterface::getPostStart() const
{
    return m_PostStart;
}


void LanceInterface::setPostStart(utility::string_t value)
{
    m_PostStart = value;
    m_PostStartIsSet = true;
}
bool LanceInterface::postStartIsSet() const
{
    return m_PostStartIsSet;
}

void LanceInterface::unsetPostStart()
{
    m_PostStartIsSet = false;
}

utility::string_t LanceInterface::getPreStop() const
{
    return m_PreStop;
}


void LanceInterface::setPreStop(utility::string_t value)
{
    m_PreStop = value;
    m_PreStopIsSet = true;
}
bool LanceInterface::preStopIsSet() const
{
    return m_PreStopIsSet;
}

void LanceInterface::unsetPreStop()
{
    m_PreStopIsSet = false;
}

utility::string_t LanceInterface::getStop() const
{
    return m_Stop;
}


void LanceInterface::setStop(utility::string_t value)
{
    m_Stop = value;
    m_StopIsSet = true;
}
bool LanceInterface::stopIsSet() const
{
    return m_StopIsSet;
}

void LanceInterface::unsetStop()
{
    m_StopIsSet = false;
}

utility::string_t LanceInterface::getPostStop() const
{
    return m_PostStop;
}


void LanceInterface::setPostStop(utility::string_t value)
{
    m_PostStop = value;
    m_PostStopIsSet = true;
}
bool LanceInterface::postStopIsSet() const
{
    return m_PostStopIsSet;
}

void LanceInterface::unsetPostStop()
{
    m_PostStopIsSet = false;
}

utility::string_t LanceInterface::getShutdown() const
{
    return m_Shutdown;
}


void LanceInterface::setShutdown(utility::string_t value)
{
    m_Shutdown = value;
    m_ShutdownIsSet = true;
}
bool LanceInterface::shutdownIsSet() const
{
    return m_ShutdownIsSet;
}

void LanceInterface::unsetShutdown()
{
    m_ShutdownIsSet = false;
}

}
}
}
}
}

