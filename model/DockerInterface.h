/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DockerInterface.h
 *
 * Subtype of TaskInterface to represent docker containers 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_DockerInterface_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_DockerInterface_H_


#include <cpprest/details/basic_types.h>
#include "TaskInterface.h"
#include "Map.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// Subtype of TaskInterface to represent docker containers 
/// </summary>
class  DockerInterface
    : public TaskInterface
{
public:
    DockerInterface();
    virtual ~DockerInterface();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DockerInterface members

    /// <summary>
    /// Name of the docker image (should include repository, credentials, tags) 
    /// </summary>
    utility::string_t getDockerImage() const;
    bool dockerImageIsSet() const;
    void unsetDockerImage();
    void setDockerImage(utility::string_t value);
    /// <summary>
    /// A key-value map representing the environment of the docker container 
    /// </summary>
    std::shared_ptr<Map> getEnvironment() const;
    bool environmentIsSet() const;
    void unsetEnvironment();
    void setEnvironment(std::shared_ptr<Map> value);

protected:
    utility::string_t m_DockerImage;
    bool m_DockerImageIsSet;
    std::shared_ptr<Map> m_Environment;
    bool m_EnvironmentIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_DockerInterface_H_ */
