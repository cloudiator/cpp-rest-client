/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IdentifierRequirement.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

IdentifierRequirement::IdentifierRequirement()
{
    m_HardwareId = utility::conversions::to_string_t("");
    m_HardwareIdIsSet = false;
    m_LocationId = utility::conversions::to_string_t("");
    m_LocationIdIsSet = false;
    m_ImageId = utility::conversions::to_string_t("");
    m_ImageIdIsSet = false;
}

IdentifierRequirement::~IdentifierRequirement()
{
}

void IdentifierRequirement::validate()
{
    // TODO: implement validation
}

web::json::value IdentifierRequirement::toJson() const
{
    web::json::value val = this->Requirement::toJson();

    if(m_HardwareIdIsSet)
    {
        val[utility::conversions::to_string_t("hardwareId")] = ModelBase::toJson(m_HardwareId);
    }
    if(m_LocationIdIsSet)
    {
        val[utility::conversions::to_string_t("locationId")] = ModelBase::toJson(m_LocationId);
    }
    if(m_ImageIdIsSet)
    {
        val[utility::conversions::to_string_t("imageId")] = ModelBase::toJson(m_ImageId);
    }

    return val;
}

void IdentifierRequirement::fromJson(web::json::value& val)
{
    this->Requirement::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("hardwareId")))
    {
        setHardwareId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("hardwareId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("locationId")))
    {
        setLocationId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("locationId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("imageId")))
    {
        setImageId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("imageId")]));
    }
}

void IdentifierRequirement::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    if(m_HardwareIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hardwareId"), m_HardwareId));
        
    }
    if(m_LocationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationId"), m_LocationId));
        
    }
    if(m_ImageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imageId"), m_ImageId));
        
    }
}

void IdentifierRequirement::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    if(multipart->hasContent(utility::conversions::to_string_t("hardwareId")))
    {
        setHardwareId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hardwareId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationId")))
    {
        setLocationId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imageId")))
    {
        setImageId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("imageId"))));
    }
}

utility::string_t IdentifierRequirement::getHardwareId() const
{
    return m_HardwareId;
}


void IdentifierRequirement::setHardwareId(utility::string_t value)
{
    m_HardwareId = value;
    m_HardwareIdIsSet = true;
}
bool IdentifierRequirement::hardwareIdIsSet() const
{
    return m_HardwareIdIsSet;
}

void IdentifierRequirement::unsetHardwareId()
{
    m_HardwareIdIsSet = false;
}

utility::string_t IdentifierRequirement::getLocationId() const
{
    return m_LocationId;
}


void IdentifierRequirement::setLocationId(utility::string_t value)
{
    m_LocationId = value;
    m_LocationIdIsSet = true;
}
bool IdentifierRequirement::locationIdIsSet() const
{
    return m_LocationIdIsSet;
}

void IdentifierRequirement::unsetLocationId()
{
    m_LocationIdIsSet = false;
}

utility::string_t IdentifierRequirement::getImageId() const
{
    return m_ImageId;
}


void IdentifierRequirement::setImageId(utility::string_t value)
{
    m_ImageId = value;
    m_ImageIdIsSet = true;
}
bool IdentifierRequirement::imageIdIsSet() const
{
    return m_ImageIdIsSet;
}

void IdentifierRequirement::unsetImageId()
{
    m_ImageIdIsSet = false;
}

}
}
}
}
}

