/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OperatingSystem.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

OperatingSystem::OperatingSystem()
{
    m_OperatingSystemTypeIsSet = false;
    m_OperatingSystemFamilyIsSet = false;
    m_OperatingSystemArchitectureIsSet = false;
    m_OperatingSystemVersion = utility::conversions::to_string_t("");
    m_OperatingSystemVersionIsSet = false;
}

OperatingSystem::~OperatingSystem()
{
}

void OperatingSystem::validate()
{
    // TODO: implement validation
}

web::json::value OperatingSystem::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_OperatingSystemTypeIsSet)
    {
        val[utility::conversions::to_string_t("operatingSystemType")] = ModelBase::toJson(m_OperatingSystemType);
    }
    if(m_OperatingSystemFamilyIsSet)
    {
        val[utility::conversions::to_string_t("operatingSystemFamily")] = ModelBase::toJson(m_OperatingSystemFamily);
    }
    if(m_OperatingSystemArchitectureIsSet)
    {
        val[utility::conversions::to_string_t("operatingSystemArchitecture")] = ModelBase::toJson(m_OperatingSystemArchitecture);
    }
    if(m_OperatingSystemVersionIsSet)
    {
        val[utility::conversions::to_string_t("operatingSystemVersion")] = ModelBase::toJson(m_OperatingSystemVersion);
    }

    return val;
}

void OperatingSystem::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("operatingSystemType")))
    {
        if(!val[utility::conversions::to_string_t("operatingSystemType")].is_null())
        {
            std::shared_ptr<OperatingSystemType> newItem(new OperatingSystemType());
            newItem->fromJson(val[utility::conversions::to_string_t("operatingSystemType")]);
            setOperatingSystemType( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("operatingSystemFamily")))
    {
        if(!val[utility::conversions::to_string_t("operatingSystemFamily")].is_null())
        {
            std::shared_ptr<OperatingSystemFamily> newItem(new OperatingSystemFamily());
            newItem->fromJson(val[utility::conversions::to_string_t("operatingSystemFamily")]);
            setOperatingSystemFamily( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("operatingSystemArchitecture")))
    {
        if(!val[utility::conversions::to_string_t("operatingSystemArchitecture")].is_null())
        {
            std::shared_ptr<OperatingSystemArchitecture> newItem(new OperatingSystemArchitecture());
            newItem->fromJson(val[utility::conversions::to_string_t("operatingSystemArchitecture")]);
            setOperatingSystemArchitecture( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("operatingSystemVersion")))
    {
        setOperatingSystemVersion(ModelBase::stringFromJson(val[utility::conversions::to_string_t("operatingSystemVersion")]));
    }
}

void OperatingSystem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_OperatingSystemTypeIsSet)
    {
        if (m_OperatingSystemType.get())
        {
            m_OperatingSystemType->toMultipart(multipart, utility::conversions::to_string_t("operatingSystemType."));
        }
        
    }
    if(m_OperatingSystemFamilyIsSet)
    {
        if (m_OperatingSystemFamily.get())
        {
            m_OperatingSystemFamily->toMultipart(multipart, utility::conversions::to_string_t("operatingSystemFamily."));
        }
        
    }
    if(m_OperatingSystemArchitectureIsSet)
    {
        if (m_OperatingSystemArchitecture.get())
        {
            m_OperatingSystemArchitecture->toMultipart(multipart, utility::conversions::to_string_t("operatingSystemArchitecture."));
        }
        
    }
    if(m_OperatingSystemVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operatingSystemVersion"), m_OperatingSystemVersion));
        
    }
}

void OperatingSystem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("operatingSystemType")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("operatingSystemType")))
        {
            std::shared_ptr<OperatingSystemType> newItem(new OperatingSystemType());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("operatingSystemType."));
            setOperatingSystemType( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operatingSystemFamily")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("operatingSystemFamily")))
        {
            std::shared_ptr<OperatingSystemFamily> newItem(new OperatingSystemFamily());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("operatingSystemFamily."));
            setOperatingSystemFamily( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operatingSystemArchitecture")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("operatingSystemArchitecture")))
        {
            std::shared_ptr<OperatingSystemArchitecture> newItem(new OperatingSystemArchitecture());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("operatingSystemArchitecture."));
            setOperatingSystemArchitecture( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operatingSystemVersion")))
    {
        setOperatingSystemVersion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("operatingSystemVersion"))));
    }
}

std::shared_ptr<OperatingSystemType> OperatingSystem::getOperatingSystemType() const
{
    return m_OperatingSystemType;
}


void OperatingSystem::setOperatingSystemType(std::shared_ptr<OperatingSystemType> value)
{
    m_OperatingSystemType = value;
    m_OperatingSystemTypeIsSet = true;
}
bool OperatingSystem::operatingSystemTypeIsSet() const
{
    return m_OperatingSystemTypeIsSet;
}

void OperatingSystem::unsetOperatingSystemType()
{
    m_OperatingSystemTypeIsSet = false;
}

std::shared_ptr<OperatingSystemFamily> OperatingSystem::getOperatingSystemFamily() const
{
    return m_OperatingSystemFamily;
}


void OperatingSystem::setOperatingSystemFamily(std::shared_ptr<OperatingSystemFamily> value)
{
    m_OperatingSystemFamily = value;
    m_OperatingSystemFamilyIsSet = true;
}
bool OperatingSystem::operatingSystemFamilyIsSet() const
{
    return m_OperatingSystemFamilyIsSet;
}

void OperatingSystem::unsetOperatingSystemFamily()
{
    m_OperatingSystemFamilyIsSet = false;
}

std::shared_ptr<OperatingSystemArchitecture> OperatingSystem::getOperatingSystemArchitecture() const
{
    return m_OperatingSystemArchitecture;
}


void OperatingSystem::setOperatingSystemArchitecture(std::shared_ptr<OperatingSystemArchitecture> value)
{
    m_OperatingSystemArchitecture = value;
    m_OperatingSystemArchitectureIsSet = true;
}
bool OperatingSystem::operatingSystemArchitectureIsSet() const
{
    return m_OperatingSystemArchitectureIsSet;
}

void OperatingSystem::unsetOperatingSystemArchitecture()
{
    m_OperatingSystemArchitectureIsSet = false;
}

utility::string_t OperatingSystem::getOperatingSystemVersion() const
{
    return m_OperatingSystemVersion;
}


void OperatingSystem::setOperatingSystemVersion(utility::string_t value)
{
    m_OperatingSystemVersion = value;
    m_OperatingSystemVersionIsSet = true;
}
bool OperatingSystem::operatingSystemVersionIsSet() const
{
    return m_OperatingSystemVersionIsSet;
}

void OperatingSystem::unsetOperatingSystemVersion()
{
    m_OperatingSystemVersionIsSet = false;
}

}
}
}
}
}

