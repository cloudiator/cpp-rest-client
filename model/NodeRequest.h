/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * NodeRequest.h
 *
 * A request to start a node. May either contain requirements or a candidate. If requirements are passed, the matchmaking logic is used to derive the most suitable node candidate otherwise the given node candidate is used. If a node candidate is given, this one will be always prefered above the requirements. 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_NodeRequest_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_NodeRequest_H_


#include "../ModelBase.h"

#include "NodeCandidate.h"
#include <cpprest/details/basic_types.h>
#include "NodeRequirements.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// A request to start a node. May either contain requirements or a candidate. If requirements are passed, the matchmaking logic is used to derive the most suitable node candidate otherwise the given node candidate is used. If a node candidate is given, this one will be always prefered above the requirements. 
/// </summary>
class  NodeRequest
    : public ModelBase
{
public:
    NodeRequest();
    virtual ~NodeRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NodeRequest members

    /// <summary>
    /// An (optional) name for all nodes starting in this group 
    /// </summary>
    utility::string_t getGroupName() const;
    bool groupNameIsSet() const;
    void unsetGroupName();
    void setGroupName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NodeRequirements> getRequirements() const;
    bool requirementsIsSet() const;
    void unsetRequirements();
    void setRequirements(std::shared_ptr<NodeRequirements> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NodeCandidate> getNodeCandidate() const;
    bool nodeCandidateIsSet() const;
    void unsetNodeCandidate();
    void setNodeCandidate(std::shared_ptr<NodeCandidate> value);

protected:
    utility::string_t m_GroupName;
    bool m_GroupNameIsSet;
    std::shared_ptr<NodeRequirements> m_Requirements;
    bool m_RequirementsIsSet;
    std::shared_ptr<NodeCandidate> m_NodeCandidate;
    bool m_NodeCandidateIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_NodeRequest_H_ */
