/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "User.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

User::User()
{
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_TenantIsSet = false;
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_TenantIsSet)
    {
        val[utility::conversions::to_string_t("tenant")] = ModelBase::toJson(m_Tenant);
    }

    return val;
}

void User::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromJson(val[utility::conversions::to_string_t("email")]));
    }
    if(val.has_field(utility::conversions::to_string_t("tenant")))
    {
        if(!val[utility::conversions::to_string_t("tenant")].is_null())
        {
            std::shared_ptr<Tenant> newItem(new Tenant());
            newItem->fromJson(val[utility::conversions::to_string_t("tenant")]);
            setTenant( newItem );
        }
    }
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
        
    }
    if(m_TenantIsSet)
    {
        if (m_Tenant.get())
        {
            m_Tenant->toMultipart(multipart, utility::conversions::to_string_t("tenant."));
        }
        
    }
}

void User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tenant")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tenant")))
        {
            std::shared_ptr<Tenant> newItem(new Tenant());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tenant."));
            setTenant( newItem );
        }
    }
}

utility::string_t User::getEmail() const
{
    return m_Email;
}


void User::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool User::emailIsSet() const
{
    return m_EmailIsSet;
}

void User::unsetEmail()
{
    m_EmailIsSet = false;
}

std::shared_ptr<Tenant> User::getTenant() const
{
    return m_Tenant;
}


void User::setTenant(std::shared_ptr<Tenant> value)
{
    m_Tenant = value;
    m_TenantIsSet = true;
}
bool User::tenantIsSet() const
{
    return m_TenantIsSet;
}

void User::unsetTenant()
{
    m_TenantIsSet = false;
}

}
}
}
}
}

