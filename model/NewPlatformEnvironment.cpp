/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NewPlatformEnvironment.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

NewPlatformEnvironment::NewPlatformEnvironment()
{
    m_Name = utility::conversions::to_string_t("");
    m_PlatformIsSet = false;
    m_PlatformServiceIsSet = false;
}

NewPlatformEnvironment::~NewPlatformEnvironment()
{
}

void NewPlatformEnvironment::validate()
{
    // TODO: implement validation
}

web::json::value NewPlatformEnvironment::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    if(m_PlatformIsSet)
    {
        val[utility::conversions::to_string_t("platform")] = ModelBase::toJson(m_Platform);
    }
    val[utility::conversions::to_string_t("platformHardware")] = ModelBase::toJson(m_PlatformHardware);
    val[utility::conversions::to_string_t("platformRuntime")] = ModelBase::toJson(m_PlatformRuntime);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PlatformService )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("platformService")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void NewPlatformEnvironment::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    if(val.has_field(utility::conversions::to_string_t("platform")))
    {
        if(!val[utility::conversions::to_string_t("platform")].is_null())
        {
            std::shared_ptr<Platform> newItem(new Platform());
            newItem->fromJson(val[utility::conversions::to_string_t("platform")]);
            setPlatform( newItem );
        }
    }
    std::shared_ptr<PlatformHardware> newPlatformHardware(new PlatformHardware());
    newPlatformHardware->fromJson(val[utility::conversions::to_string_t("platformHardware")]);
    setPlatformHardware( newPlatformHardware );
    std::shared_ptr<PlatformRuntime> newPlatformRuntime(new PlatformRuntime());
    newPlatformRuntime->fromJson(val[utility::conversions::to_string_t("platformRuntime")]);
    setPlatformRuntime( newPlatformRuntime );
    {
        m_PlatformService.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("platformService")))
        {
        for( auto& item : val[utility::conversions::to_string_t("platformService")].as_array() )
        {
            if(item.is_null())
            {
                m_PlatformService.push_back( std::shared_ptr<PlatformService>(nullptr) );
            }
            else
            {
                std::shared_ptr<PlatformService> newItem(new PlatformService());
                newItem->fromJson(item);
                m_PlatformService.push_back( newItem );
            }
        }
        }
    }
}

void NewPlatformEnvironment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    if(m_PlatformIsSet)
    {
        if (m_Platform.get())
        {
            m_Platform->toMultipart(multipart, utility::conversions::to_string_t("platform."));
        }
        
    }
    m_PlatformHardware->toMultipart(multipart, utility::conversions::to_string_t("platformHardware."));
    m_PlatformRuntime->toMultipart(multipart, utility::conversions::to_string_t("platformRuntime."));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PlatformService )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("platformService"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void NewPlatformEnvironment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    if(multipart->hasContent(utility::conversions::to_string_t("platform")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("platform")))
        {
            std::shared_ptr<Platform> newItem(new Platform());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("platform."));
            setPlatform( newItem );
        }
    }
    std::shared_ptr<PlatformHardware> newPlatformHardware(new PlatformHardware());
    newPlatformHardware->fromMultiPart(multipart, utility::conversions::to_string_t("platformHardware."));
    setPlatformHardware( newPlatformHardware );
    std::shared_ptr<PlatformRuntime> newPlatformRuntime(new PlatformRuntime());
    newPlatformRuntime->fromMultiPart(multipart, utility::conversions::to_string_t("platformRuntime."));
    setPlatformRuntime( newPlatformRuntime );
    {
        m_PlatformService.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("platformService")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("platformService"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_PlatformService.push_back( std::shared_ptr<PlatformService>(nullptr) );
            }
            else
            {
                std::shared_ptr<PlatformService> newItem(new PlatformService());
                newItem->fromJson(item);
                m_PlatformService.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t NewPlatformEnvironment::getName() const
{
    return m_Name;
}


void NewPlatformEnvironment::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::shared_ptr<Platform> NewPlatformEnvironment::getPlatform() const
{
    return m_Platform;
}


void NewPlatformEnvironment::setPlatform(std::shared_ptr<Platform> value)
{
    m_Platform = value;
    m_PlatformIsSet = true;
}
bool NewPlatformEnvironment::platformIsSet() const
{
    return m_PlatformIsSet;
}

void NewPlatformEnvironment::unsetPlatform()
{
    m_PlatformIsSet = false;
}

std::shared_ptr<PlatformHardware> NewPlatformEnvironment::getPlatformHardware() const
{
    return m_PlatformHardware;
}


void NewPlatformEnvironment::setPlatformHardware(std::shared_ptr<PlatformHardware> value)
{
    m_PlatformHardware = value;
    
}
std::shared_ptr<PlatformRuntime> NewPlatformEnvironment::getPlatformRuntime() const
{
    return m_PlatformRuntime;
}


void NewPlatformEnvironment::setPlatformRuntime(std::shared_ptr<PlatformRuntime> value)
{
    m_PlatformRuntime = value;
    
}
std::vector<std::shared_ptr<PlatformService>>& NewPlatformEnvironment::getPlatformService()
{
    return m_PlatformService;
}

void NewPlatformEnvironment::setPlatformService(std::vector<std::shared_ptr<PlatformService>> value)
{
    m_PlatformService = value;
    m_PlatformServiceIsSet = true;
}
bool NewPlatformEnvironment::platformServiceIsSet() const
{
    return m_PlatformServiceIsSet;
}

void NewPlatformEnvironment::unsetPlatformService()
{
    m_PlatformServiceIsSet = false;
}

}
}
}
}
}

