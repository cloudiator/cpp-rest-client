/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Job.h
 *
 * Represents a job in the system. A job is a logical group of tasks 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_Job_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_Job_H_


#include "../ModelBase.h"

#include "JobNew.h"
#include "Task.h"
#include <cpprest/details/basic_types.h>
#include "Communication.h"
#include "Requirement.h"
#include <vector>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// Represents a job in the system. A job is a logical group of tasks 
/// </summary>
class  Job
    : public ModelBase
{
public:
    Job();
    virtual ~Job();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Job members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// An array of tasks that form this application. 
    /// </summary>
    std::vector<std::shared_ptr<Task>>& getTasks();
    bool tasksIsSet() const;
    void unsetTasks();
    void setTasks(std::vector<std::shared_ptr<Task>> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Communication>>& getCommunications();
    bool communicationsIsSet() const;
    void unsetCommunications();
    void setCommunications(std::vector<std::shared_ptr<Communication>> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Requirement>>& getRequirements();
    bool requirementsIsSet() const;
    void unsetRequirements();
    void setRequirements(std::vector<std::shared_ptr<Requirement>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);

protected:
    utility::string_t m_Name;
        std::vector<std::shared_ptr<Task>> m_Tasks;
    bool m_TasksIsSet;
    std::vector<std::shared_ptr<Communication>> m_Communications;
    bool m_CommunicationsIsSet;
    std::vector<std::shared_ptr<Requirement>> m_Requirements;
    bool m_RequirementsIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_Job_H_ */
