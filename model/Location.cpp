/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Location.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Location::Location()
{
    m_Id = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_ProviderId = utility::conversions::to_string_t("");
    m_LocationScope = utility::conversions::to_string_t("");
    m_IsAssignable = false;
    m_GeoLocationIsSet = false;
    m_ParentIsSet = false;
}

Location::~Location()
{
}

void Location::validate()
{
    // TODO: implement validation
}

web::json::value Location::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("providerId")] = ModelBase::toJson(m_ProviderId);
    val[utility::conversions::to_string_t("locationScope")] = ModelBase::toJson(m_LocationScope);
    val[utility::conversions::to_string_t("isAssignable")] = ModelBase::toJson(m_IsAssignable);
    if(m_GeoLocationIsSet)
    {
        val[utility::conversions::to_string_t("geoLocation")] = ModelBase::toJson(m_GeoLocation);
    }
    if(m_ParentIsSet)
    {
        val[utility::conversions::to_string_t("parent")] = ModelBase::toJson(m_Parent);
    }

    return val;
}

void Location::fromJson(web::json::value& val)
{
    setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setProviderId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("providerId")]));
    setLocationScope(ModelBase::stringFromJson(val[utility::conversions::to_string_t("locationScope")]));
    setIsAssignable(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isAssignable")]));
    if(val.has_field(utility::conversions::to_string_t("geoLocation")))
    {
        if(!val[utility::conversions::to_string_t("geoLocation")].is_null())
        {
            std::shared_ptr<GeoLocation> newItem(new GeoLocation());
            newItem->fromJson(val[utility::conversions::to_string_t("geoLocation")]);
            setGeoLocation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parent")))
    {
        if(!val[utility::conversions::to_string_t("parent")].is_null())
        {
            std::shared_ptr<Location> newItem(new Location());
            newItem->fromJson(val[utility::conversions::to_string_t("parent")]);
            setParent( newItem );
        }
    }
}

void Location::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("providerId"), m_ProviderId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationScope"), m_LocationScope));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isAssignable"), m_IsAssignable));
    if(m_GeoLocationIsSet)
    {
        if (m_GeoLocation.get())
        {
            m_GeoLocation->toMultipart(multipart, utility::conversions::to_string_t("geoLocation."));
        }
        
    }
    if(m_ParentIsSet)
    {
        if (m_Parent.get())
        {
            m_Parent->toMultipart(multipart, utility::conversions::to_string_t("parent."));
        }
        
    }
}

void Location::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setProviderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("providerId"))));
    setLocationScope(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationScope"))));
    setIsAssignable(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isAssignable"))));
    if(multipart->hasContent(utility::conversions::to_string_t("geoLocation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("geoLocation")))
        {
            std::shared_ptr<GeoLocation> newItem(new GeoLocation());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("geoLocation."));
            setGeoLocation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parent")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parent")))
        {
            std::shared_ptr<Location> newItem(new Location());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parent."));
            setParent( newItem );
        }
    }
}

utility::string_t Location::getId() const
{
    return m_Id;
}


void Location::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t Location::getName() const
{
    return m_Name;
}


void Location::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Location::getProviderId() const
{
    return m_ProviderId;
}


void Location::setProviderId(utility::string_t value)
{
    m_ProviderId = value;
    
}
utility::string_t Location::getLocationScope() const
{
    return m_LocationScope;
}


void Location::setLocationScope(utility::string_t value)
{
    m_LocationScope = value;
    
}
bool Location::isIsAssignable() const
{
    return m_IsAssignable;
}


void Location::setIsAssignable(bool value)
{
    m_IsAssignable = value;
    
}
std::shared_ptr<GeoLocation> Location::getGeoLocation() const
{
    return m_GeoLocation;
}


void Location::setGeoLocation(std::shared_ptr<GeoLocation> value)
{
    m_GeoLocation = value;
    m_GeoLocationIsSet = true;
}
bool Location::geoLocationIsSet() const
{
    return m_GeoLocationIsSet;
}

void Location::unsetGeoLocation()
{
    m_GeoLocationIsSet = false;
}

std::shared_ptr<Location> Location::getParent() const
{
    return m_Parent;
}


void Location::setParent(std::shared_ptr<Location> value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}
bool Location::parentIsSet() const
{
    return m_ParentIsSet;
}

void Location::unsetParent()
{
    m_ParentIsSet = false;
}

}
}
}
}
}

