/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Schedule.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

Schedule::Schedule()
{
    m_Job = utility::conversions::to_string_t("");
    m_JobIsSet = false;
    m_Instantiation = utility::conversions::to_string_t("");
    m_InstantiationIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ProcessesIsSet = false;
}

Schedule::~Schedule()
{
}

void Schedule::validate()
{
    // TODO: implement validation
}

web::json::value Schedule::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_JobIsSet)
    {
        val[utility::conversions::to_string_t("job")] = ModelBase::toJson(m_Job);
    }
    if(m_InstantiationIsSet)
    {
        val[utility::conversions::to_string_t("instantiation")] = ModelBase::toJson(m_Instantiation);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Processes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("processes")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Schedule::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("job")))
    {
        setJob(ModelBase::stringFromJson(val[utility::conversions::to_string_t("job")]));
    }
    if(val.has_field(utility::conversions::to_string_t("instantiation")))
    {
        setInstantiation(ModelBase::stringFromJson(val[utility::conversions::to_string_t("instantiation")]));
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
    {
        m_Processes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("processes")))
        {
        for( auto& item : val[utility::conversions::to_string_t("processes")].as_array() )
        {
            if(item.is_null())
            {
                m_Processes.push_back( std::shared_ptr<Process>(nullptr) );
            }
            else
            {
                std::shared_ptr<Process> newItem(new Process());
                newItem->fromJson(item);
                m_Processes.push_back( newItem );
            }
        }
        }
    }
}

void Schedule::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_JobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("job"), m_Job));
        
    }
    if(m_InstantiationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instantiation"), m_Instantiation));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Processes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("processes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Schedule::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("job")))
    {
        setJob(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("job"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instantiation")))
    {
        setInstantiation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("instantiation"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    {
        m_Processes.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("processes")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("processes"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Processes.push_back( std::shared_ptr<Process>(nullptr) );
            }
            else
            {
                std::shared_ptr<Process> newItem(new Process());
                newItem->fromJson(item);
                m_Processes.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t Schedule::getJob() const
{
    return m_Job;
}


void Schedule::setJob(utility::string_t value)
{
    m_Job = value;
    m_JobIsSet = true;
}
bool Schedule::jobIsSet() const
{
    return m_JobIsSet;
}

void Schedule::unsetJob()
{
    m_JobIsSet = false;
}

utility::string_t Schedule::getInstantiation() const
{
    return m_Instantiation;
}


void Schedule::setInstantiation(utility::string_t value)
{
    m_Instantiation = value;
    m_InstantiationIsSet = true;
}
bool Schedule::instantiationIsSet() const
{
    return m_InstantiationIsSet;
}

void Schedule::unsetInstantiation()
{
    m_InstantiationIsSet = false;
}

utility::string_t Schedule::getId() const
{
    return m_Id;
}


void Schedule::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Schedule::idIsSet() const
{
    return m_IdIsSet;
}

void Schedule::unsetId()
{
    m_IdIsSet = false;
}

std::vector<std::shared_ptr<Process>>& Schedule::getProcesses()
{
    return m_Processes;
}

void Schedule::setProcesses(std::vector<std::shared_ptr<Process>> value)
{
    m_Processes = value;
    m_ProcessesIsSet = true;
}
bool Schedule::processesIsSet() const
{
    return m_ProcessesIsSet;
}

void Schedule::unsetProcesses()
{
    m_ProcessesIsSet = false;
}

}
}
}
}
}

