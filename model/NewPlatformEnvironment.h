/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * NewPlatformEnvironment.h
 *
 * Repesents a PaaS environemnt to run an component 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_NewPlatformEnvironment_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_NewPlatformEnvironment_H_


#include "../ModelBase.h"

#include "PlatformHardware.h"
#include "Platform.h"
#include <cpprest/details/basic_types.h>
#include "PlatformRuntime.h"
#include "PlatformService.h"
#include <vector>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// Repesents a PaaS environemnt to run an component 
/// </summary>
class  NewPlatformEnvironment
    : public ModelBase
{
public:
    NewPlatformEnvironment();
    virtual ~NewPlatformEnvironment();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NewPlatformEnvironment members

    /// <summary>
    /// Human-readable name
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Platform> getPlatform() const;
    bool platformIsSet() const;
    void unsetPlatform();
    void setPlatform(std::shared_ptr<Platform> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlatformHardware> getPlatformHardware() const;
        void setPlatformHardware(std::shared_ptr<PlatformHardware> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlatformRuntime> getPlatformRuntime() const;
        void setPlatformRuntime(std::shared_ptr<PlatformRuntime> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PlatformService>>& getPlatformService();
    bool platformServiceIsSet() const;
    void unsetPlatformService();
    void setPlatformService(std::vector<std::shared_ptr<PlatformService>> value);

protected:
    utility::string_t m_Name;
        std::shared_ptr<Platform> m_Platform;
    bool m_PlatformIsSet;
    std::shared_ptr<PlatformHardware> m_PlatformHardware;
        std::shared_ptr<PlatformRuntime> m_PlatformRuntime;
        std::vector<std::shared_ptr<PlatformService>> m_PlatformService;
    bool m_PlatformServiceIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_NewPlatformEnvironment_H_ */
