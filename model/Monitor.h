/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Monitor.h
 *
 * 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_Monitor_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_Monitor_H_


#include "../ModelBase.h"

#include "DataSink.h"
#include "Sensor.h"
#include "MonitoringTag.h"
#include <cpprest/details/basic_types.h>
#include "MonitoringTarget.h"
#include "MonitorNew.h"
#include <vector>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// 
/// </summary>
class  Monitor
    : public ModelBase
{
public:
    Monitor();
    virtual ~Monitor();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Monitor members

    /// <summary>
    /// Name of the collected metric
    /// </summary>
    utility::string_t getMetric() const;
    bool metricIsSet() const;
    void unsetMetric();
    void setMetric(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<MonitoringTarget>>& getTargets();
    bool targetsIsSet() const;
    void unsetTargets();
    void setTargets(std::vector<std::shared_ptr<MonitoringTarget>> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Sensor> getSensor() const;
    bool sensorIsSet() const;
    void unsetSensor();
    void setSensor(std::shared_ptr<Sensor> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DataSink>>& getSinks();
    bool sinksIsSet() const;
    void unsetSinks();
    void setSinks(std::vector<std::shared_ptr<DataSink>> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<MonitoringTag>>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    void setTags(std::vector<std::shared_ptr<MonitoringTag>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);

protected:
    utility::string_t m_Metric;
    bool m_MetricIsSet;
    std::vector<std::shared_ptr<MonitoringTarget>> m_Targets;
    bool m_TargetsIsSet;
    std::shared_ptr<Sensor> m_Sensor;
    bool m_SensorIsSet;
    std::vector<std::shared_ptr<DataSink>> m_Sinks;
    bool m_SinksIsSet;
    std::vector<std::shared_ptr<MonitoringTag>> m_Tags;
    bool m_TagsIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_Monitor_H_ */
