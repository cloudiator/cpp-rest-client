/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NodeProperties.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

NodeProperties::NodeProperties()
{
    m_ProviderId = utility::conversions::to_string_t("");
    m_ProviderIdIsSet = false;
    m_NumberOfCores = 0;
    m_NumberOfCoresIsSet = false;
    m_Memory = 0L;
    m_MemoryIsSet = false;
    m_Disk = 0.0f;
    m_DiskIsSet = false;
    m_OperatingSystemIsSet = false;
    m_GeoLocationIsSet = false;
}

NodeProperties::~NodeProperties()
{
}

void NodeProperties::validate()
{
    // TODO: implement validation
}

web::json::value NodeProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ProviderIdIsSet)
    {
        val[utility::conversions::to_string_t("providerId")] = ModelBase::toJson(m_ProviderId);
    }
    if(m_NumberOfCoresIsSet)
    {
        val[utility::conversions::to_string_t("numberOfCores")] = ModelBase::toJson(m_NumberOfCores);
    }
    if(m_MemoryIsSet)
    {
        val[utility::conversions::to_string_t("memory")] = ModelBase::toJson(m_Memory);
    }
    if(m_DiskIsSet)
    {
        val[utility::conversions::to_string_t("disk")] = ModelBase::toJson(m_Disk);
    }
    if(m_OperatingSystemIsSet)
    {
        val[utility::conversions::to_string_t("operatingSystem")] = ModelBase::toJson(m_OperatingSystem);
    }
    if(m_GeoLocationIsSet)
    {
        val[utility::conversions::to_string_t("geoLocation")] = ModelBase::toJson(m_GeoLocation);
    }

    return val;
}

void NodeProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("providerId")))
    {
        setProviderId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("providerId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("numberOfCores")))
    {
        setNumberOfCores(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("numberOfCores")]));
    }
    if(val.has_field(utility::conversions::to_string_t("memory")))
    {
        setMemory(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("memory")]));
    }
    if(val.has_field(utility::conversions::to_string_t("disk")))
    {
        setDisk(ModelBase::floatFromJson(val[utility::conversions::to_string_t("disk")]));
    }
    if(val.has_field(utility::conversions::to_string_t("operatingSystem")))
    {
        if(!val[utility::conversions::to_string_t("operatingSystem")].is_null())
        {
            std::shared_ptr<OperatingSystem> newItem(new OperatingSystem());
            newItem->fromJson(val[utility::conversions::to_string_t("operatingSystem")]);
            setOperatingSystem( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geoLocation")))
    {
        if(!val[utility::conversions::to_string_t("geoLocation")].is_null())
        {
            std::shared_ptr<GeoLocation> newItem(new GeoLocation());
            newItem->fromJson(val[utility::conversions::to_string_t("geoLocation")]);
            setGeoLocation( newItem );
        }
    }
}

void NodeProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ProviderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("providerId"), m_ProviderId));
        
    }
    if(m_NumberOfCoresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numberOfCores"), m_NumberOfCores));
    }
    if(m_MemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("memory"), m_Memory));
    }
    if(m_DiskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disk"), m_Disk));
    }
    if(m_OperatingSystemIsSet)
    {
        if (m_OperatingSystem.get())
        {
            m_OperatingSystem->toMultipart(multipart, utility::conversions::to_string_t("operatingSystem."));
        }
        
    }
    if(m_GeoLocationIsSet)
    {
        if (m_GeoLocation.get())
        {
            m_GeoLocation->toMultipart(multipart, utility::conversions::to_string_t("geoLocation."));
        }
        
    }
}

void NodeProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("providerId")))
    {
        setProviderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("providerId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberOfCores")))
    {
        setNumberOfCores(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("numberOfCores"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("memory")))
    {
        setMemory(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("memory"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("disk")))
    {
        setDisk(ModelBase::floatFromHttpContent(multipart->getContent(utility::conversions::to_string_t("disk"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operatingSystem")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("operatingSystem")))
        {
            std::shared_ptr<OperatingSystem> newItem(new OperatingSystem());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("operatingSystem."));
            setOperatingSystem( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geoLocation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("geoLocation")))
        {
            std::shared_ptr<GeoLocation> newItem(new GeoLocation());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("geoLocation."));
            setGeoLocation( newItem );
        }
    }
}

utility::string_t NodeProperties::getProviderId() const
{
    return m_ProviderId;
}


void NodeProperties::setProviderId(utility::string_t value)
{
    m_ProviderId = value;
    m_ProviderIdIsSet = true;
}
bool NodeProperties::providerIdIsSet() const
{
    return m_ProviderIdIsSet;
}

void NodeProperties::unsetProviderId()
{
    m_ProviderIdIsSet = false;
}

int32_t NodeProperties::getNumberOfCores() const
{
    return m_NumberOfCores;
}


void NodeProperties::setNumberOfCores(int32_t value)
{
    m_NumberOfCores = value;
    m_NumberOfCoresIsSet = true;
}
bool NodeProperties::numberOfCoresIsSet() const
{
    return m_NumberOfCoresIsSet;
}

void NodeProperties::unsetNumberOfCores()
{
    m_NumberOfCoresIsSet = false;
}

int64_t NodeProperties::getMemory() const
{
    return m_Memory;
}


void NodeProperties::setMemory(int64_t value)
{
    m_Memory = value;
    m_MemoryIsSet = true;
}
bool NodeProperties::memoryIsSet() const
{
    return m_MemoryIsSet;
}

void NodeProperties::unsetMemory()
{
    m_MemoryIsSet = false;
}

float NodeProperties::getDisk() const
{
    return m_Disk;
}


void NodeProperties::setDisk(float value)
{
    m_Disk = value;
    m_DiskIsSet = true;
}
bool NodeProperties::diskIsSet() const
{
    return m_DiskIsSet;
}

void NodeProperties::unsetDisk()
{
    m_DiskIsSet = false;
}

std::shared_ptr<OperatingSystem> NodeProperties::getOperatingSystem() const
{
    return m_OperatingSystem;
}


void NodeProperties::setOperatingSystem(std::shared_ptr<OperatingSystem> value)
{
    m_OperatingSystem = value;
    m_OperatingSystemIsSet = true;
}
bool NodeProperties::operatingSystemIsSet() const
{
    return m_OperatingSystemIsSet;
}

void NodeProperties::unsetOperatingSystem()
{
    m_OperatingSystemIsSet = false;
}

std::shared_ptr<GeoLocation> NodeProperties::getGeoLocation() const
{
    return m_GeoLocation;
}


void NodeProperties::setGeoLocation(std::shared_ptr<GeoLocation> value)
{
    m_GeoLocation = value;
    m_GeoLocationIsSet = true;
}
bool NodeProperties::geoLocationIsSet() const
{
    return m_GeoLocationIsSet;
}

void NodeProperties::unsetGeoLocation()
{
    m_GeoLocationIsSet = false;
}

}
}
}
}
}

