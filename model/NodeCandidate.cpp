/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NodeCandidate.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

NodeCandidate::NodeCandidate()
{
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_CloudIsSet = false;
    m_ImageIsSet = false;
    m_HardwareIsSet = false;
    m_LocationIsSet = false;
}

NodeCandidate::~NodeCandidate()
{
}

void NodeCandidate::validate()
{
    // TODO: implement validation
}

web::json::value NodeCandidate::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }
    if(m_CloudIsSet)
    {
        val[utility::conversions::to_string_t("cloud")] = ModelBase::toJson(m_Cloud);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_HardwareIsSet)
    {
        val[utility::conversions::to_string_t("hardware")] = ModelBase::toJson(m_Hardware);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }

    return val;
}

void NodeCandidate::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("price")]));
    }
    if(val.has_field(utility::conversions::to_string_t("cloud")))
    {
        if(!val[utility::conversions::to_string_t("cloud")].is_null())
        {
            std::shared_ptr<Cloud> newItem(new Cloud());
            newItem->fromJson(val[utility::conversions::to_string_t("cloud")]);
            setCloud( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        if(!val[utility::conversions::to_string_t("image")].is_null())
        {
            std::shared_ptr<Image> newItem(new Image());
            newItem->fromJson(val[utility::conversions::to_string_t("image")]);
            setImage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hardware")))
    {
        if(!val[utility::conversions::to_string_t("hardware")].is_null())
        {
            std::shared_ptr<Hardware> newItem(new Hardware());
            newItem->fromJson(val[utility::conversions::to_string_t("hardware")]);
            setHardware( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        if(!val[utility::conversions::to_string_t("location")].is_null())
        {
            std::shared_ptr<Location> newItem(new Location());
            newItem->fromJson(val[utility::conversions::to_string_t("location")]);
            setLocation( newItem );
        }
    }
}

void NodeCandidate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    }
    if(m_CloudIsSet)
    {
        if (m_Cloud.get())
        {
            m_Cloud->toMultipart(multipart, utility::conversions::to_string_t("cloud."));
        }
        
    }
    if(m_ImageIsSet)
    {
        if (m_Image.get())
        {
            m_Image->toMultipart(multipart, utility::conversions::to_string_t("image."));
        }
        
    }
    if(m_HardwareIsSet)
    {
        if (m_Hardware.get())
        {
            m_Hardware->toMultipart(multipart, utility::conversions::to_string_t("hardware."));
        }
        
    }
    if(m_LocationIsSet)
    {
        if (m_Location.get())
        {
            m_Location->toMultipart(multipart, utility::conversions::to_string_t("location."));
        }
        
    }
}

void NodeCandidate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloud")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cloud")))
        {
            std::shared_ptr<Cloud> newItem(new Cloud());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cloud."));
            setCloud( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("image")))
        {
            std::shared_ptr<Image> newItem(new Image());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("image."));
            setImage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hardware")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hardware")))
        {
            std::shared_ptr<Hardware> newItem(new Hardware());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hardware."));
            setHardware( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("location")))
        {
            std::shared_ptr<Location> newItem(new Location());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("location."));
            setLocation( newItem );
        }
    }
}

double NodeCandidate::getPrice() const
{
    return m_Price;
}


void NodeCandidate::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool NodeCandidate::priceIsSet() const
{
    return m_PriceIsSet;
}

void NodeCandidate::unsetPrice()
{
    m_PriceIsSet = false;
}

std::shared_ptr<Cloud> NodeCandidate::getCloud() const
{
    return m_Cloud;
}


void NodeCandidate::setCloud(std::shared_ptr<Cloud> value)
{
    m_Cloud = value;
    m_CloudIsSet = true;
}
bool NodeCandidate::cloudIsSet() const
{
    return m_CloudIsSet;
}

void NodeCandidate::unsetCloud()
{
    m_CloudIsSet = false;
}

std::shared_ptr<Image> NodeCandidate::getImage() const
{
    return m_Image;
}


void NodeCandidate::setImage(std::shared_ptr<Image> value)
{
    m_Image = value;
    m_ImageIsSet = true;
}
bool NodeCandidate::imageIsSet() const
{
    return m_ImageIsSet;
}

void NodeCandidate::unsetImage()
{
    m_ImageIsSet = false;
}

std::shared_ptr<Hardware> NodeCandidate::getHardware() const
{
    return m_Hardware;
}


void NodeCandidate::setHardware(std::shared_ptr<Hardware> value)
{
    m_Hardware = value;
    m_HardwareIsSet = true;
}
bool NodeCandidate::hardwareIsSet() const
{
    return m_HardwareIsSet;
}

void NodeCandidate::unsetHardware()
{
    m_HardwareIsSet = false;
}

std::shared_ptr<Location> NodeCandidate::getLocation() const
{
    return m_Location;
}


void NodeCandidate::setLocation(std::shared_ptr<Location> value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool NodeCandidate::locationIsSet() const
{
    return m_LocationIsSet;
}

void NodeCandidate::unsetLocation()
{
    m_LocationIsSet = false;
}

}
}
}
}
}

