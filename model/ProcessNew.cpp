/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ProcessNew.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

ProcessNew::ProcessNew()
{
    m_Schedule = utility::conversions::to_string_t("");
    m_Task = utility::conversions::to_string_t("");
    m_Node = utility::conversions::to_string_t("");
}

ProcessNew::~ProcessNew()
{
}

void ProcessNew::validate()
{
    // TODO: implement validation
}

web::json::value ProcessNew::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("schedule")] = ModelBase::toJson(m_Schedule);
    val[utility::conversions::to_string_t("task")] = ModelBase::toJson(m_Task);
    val[utility::conversions::to_string_t("node")] = ModelBase::toJson(m_Node);

    return val;
}

void ProcessNew::fromJson(web::json::value& val)
{
    setSchedule(ModelBase::stringFromJson(val[utility::conversions::to_string_t("schedule")]));
    setTask(ModelBase::stringFromJson(val[utility::conversions::to_string_t("task")]));
    setNode(ModelBase::stringFromJson(val[utility::conversions::to_string_t("node")]));
}

void ProcessNew::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("schedule"), m_Schedule));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("task"), m_Task));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("node"), m_Node));
}

void ProcessNew::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSchedule(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("schedule"))));
    setTask(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("task"))));
    setNode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("node"))));
}

utility::string_t ProcessNew::getSchedule() const
{
    return m_Schedule;
}


void ProcessNew::setSchedule(utility::string_t value)
{
    m_Schedule = value;
    
}
utility::string_t ProcessNew::getTask() const
{
    return m_Task;
}


void ProcessNew::setTask(utility::string_t value)
{
    m_Task = value;
    
}
utility::string_t ProcessNew::getNode() const
{
    return m_Node;
}


void ProcessNew::setNode(utility::string_t value)
{
    m_Node = value;
    
}
}
}
}
}
}

