/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Token.h
 *
 * Represents an API Token, that is used to represent a successful authentication of a user 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_Token_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_Token_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// Represents an API Token, that is used to represent a successful authentication of a user 
/// </summary>
class  Token
    : public ModelBase
{
public:
    Token();
    virtual ~Token();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Token members

    /// <summary>
    /// The token
    /// </summary>
    utility::string_t getToken() const;
        void setToken(utility::string_t value);
    /// <summary>
    /// owner of the token
    /// </summary>
    utility::string_t getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();
    void setOwner(utility::string_t value);
    /// <summary>
    /// SystemMillis Token was issued
    /// </summary>
    int64_t getIssuedTime() const;
    bool issuedTimeIsSet() const;
    void unsetIssuedTime();
    void setIssuedTime(int64_t value);
    /// <summary>
    /// SystemMillis the Token expires
    /// </summary>
    int64_t getExpireTime() const;
    bool expireTimeIsSet() const;
    void unsetExpireTime();
    void setExpireTime(int64_t value);

protected:
    utility::string_t m_Token;
        utility::string_t m_Owner;
    bool m_OwnerIsSet;
    int64_t m_IssuedTime;
    bool m_IssuedTimeIsSet;
    int64_t m_ExpireTime;
    bool m_ExpireTimeIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_Token_H_ */
