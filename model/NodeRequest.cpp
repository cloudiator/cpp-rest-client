/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NodeRequest.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

NodeRequest::NodeRequest()
{
    m_GroupName = utility::conversions::to_string_t("");
    m_GroupNameIsSet = false;
    m_RequirementsIsSet = false;
    m_NodeCandidateIsSet = false;
}

NodeRequest::~NodeRequest()
{
}

void NodeRequest::validate()
{
    // TODO: implement validation
}

web::json::value NodeRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_GroupNameIsSet)
    {
        val[utility::conversions::to_string_t("groupName")] = ModelBase::toJson(m_GroupName);
    }
    if(m_RequirementsIsSet)
    {
        val[utility::conversions::to_string_t("requirements")] = ModelBase::toJson(m_Requirements);
    }
    if(m_NodeCandidateIsSet)
    {
        val[utility::conversions::to_string_t("nodeCandidate")] = ModelBase::toJson(m_NodeCandidate);
    }

    return val;
}

void NodeRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("groupName")))
    {
        setGroupName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("groupName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("requirements")))
    {
        if(!val[utility::conversions::to_string_t("requirements")].is_null())
        {
            std::shared_ptr<NodeRequirements> newItem(new NodeRequirements());
            newItem->fromJson(val[utility::conversions::to_string_t("requirements")]);
            setRequirements( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeCandidate")))
    {
        if(!val[utility::conversions::to_string_t("nodeCandidate")].is_null())
        {
            std::shared_ptr<NodeCandidate> newItem(new NodeCandidate());
            newItem->fromJson(val[utility::conversions::to_string_t("nodeCandidate")]);
            setNodeCandidate( newItem );
        }
    }
}

void NodeRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_GroupNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupName"), m_GroupName));
        
    }
    if(m_RequirementsIsSet)
    {
        if (m_Requirements.get())
        {
            m_Requirements->toMultipart(multipart, utility::conversions::to_string_t("requirements."));
        }
        
    }
    if(m_NodeCandidateIsSet)
    {
        if (m_NodeCandidate.get())
        {
            m_NodeCandidate->toMultipart(multipart, utility::conversions::to_string_t("nodeCandidate."));
        }
        
    }
}

void NodeRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("groupName")))
    {
        setGroupName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requirements")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requirements")))
        {
            std::shared_ptr<NodeRequirements> newItem(new NodeRequirements());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requirements."));
            setRequirements( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeCandidate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nodeCandidate")))
        {
            std::shared_ptr<NodeCandidate> newItem(new NodeCandidate());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nodeCandidate."));
            setNodeCandidate( newItem );
        }
    }
}

utility::string_t NodeRequest::getGroupName() const
{
    return m_GroupName;
}


void NodeRequest::setGroupName(utility::string_t value)
{
    m_GroupName = value;
    m_GroupNameIsSet = true;
}
bool NodeRequest::groupNameIsSet() const
{
    return m_GroupNameIsSet;
}

void NodeRequest::unsetGroupName()
{
    m_GroupNameIsSet = false;
}

std::shared_ptr<NodeRequirements> NodeRequest::getRequirements() const
{
    return m_Requirements;
}


void NodeRequest::setRequirements(std::shared_ptr<NodeRequirements> value)
{
    m_Requirements = value;
    m_RequirementsIsSet = true;
}
bool NodeRequest::requirementsIsSet() const
{
    return m_RequirementsIsSet;
}

void NodeRequest::unsetRequirements()
{
    m_RequirementsIsSet = false;
}

std::shared_ptr<NodeCandidate> NodeRequest::getNodeCandidate() const
{
    return m_NodeCandidate;
}


void NodeRequest::setNodeCandidate(std::shared_ptr<NodeCandidate> value)
{
    m_NodeCandidate = value;
    m_NodeCandidateIsSet = true;
}
bool NodeRequest::nodeCandidateIsSet() const
{
    return m_NodeCandidateIsSet;
}

void NodeRequest::unsetNodeCandidate()
{
    m_NodeCandidateIsSet = false;
}

}
}
}
}
}

