/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LoginCredential.h
 *
 * Credentials for remote access to the virtual machine. Typically, one of password or privateKey is set. 
 */

#ifndef IO_GITHUB_CLOUDIATOR_REST_MODEL_LoginCredential_H_
#define IO_GITHUB_CLOUDIATOR_REST_MODEL_LoginCredential_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

/// <summary>
/// Credentials for remote access to the virtual machine. Typically, one of password or privateKey is set. 
/// </summary>
class  LoginCredential
    : public ModelBase
{
public:
    LoginCredential();
    virtual ~LoginCredential();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LoginCredential members

    /// <summary>
    /// The username for login
    /// </summary>
    utility::string_t getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();
    void setUsername(utility::string_t value);
    /// <summary>
    /// The password for login
    /// </summary>
    utility::string_t getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();
    void setPassword(utility::string_t value);
    /// <summary>
    /// The private key for login
    /// </summary>
    utility::string_t getPrivateKey() const;
    bool privateKeyIsSet() const;
    void unsetPrivateKey();
    void setPrivateKey(utility::string_t value);

protected:
    utility::string_t m_Username;
    bool m_UsernameIsSet;
    utility::string_t m_Password;
    bool m_PasswordIsSet;
    utility::string_t m_PrivateKey;
    bool m_PrivateKeyIsSet;
};

}
}
}
}
}

#endif /* IO_GITHUB_CLOUDIATOR_REST_MODEL_LoginCredential_H_ */
