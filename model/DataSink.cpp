/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DataSink.h"

namespace io {
namespace github {
namespace cloudiator {
namespace rest {
namespace model {

DataSink::DataSink()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_ConfigurationIsSet = false;
}

DataSink::~DataSink()
{
}

void DataSink::validate()
{
    // TODO: implement validation
}

web::json::value DataSink::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }

    return val;
}

void DataSink::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("type")]));
    }
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        if(!val[utility::conversions::to_string_t("configuration")].is_null())
        {
            std::shared_ptr<Map> newItem(new Map());
            newItem->fromJson(val[utility::conversions::to_string_t("configuration")]);
            setConfiguration( newItem );
        }
    }
}

void DataSink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_ConfigurationIsSet)
    {
        if (m_Configuration.get())
        {
            m_Configuration->toMultipart(multipart, utility::conversions::to_string_t("configuration."));
        }
        
    }
}

void DataSink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
        {
            std::shared_ptr<Map> newItem(new Map());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("configuration."));
            setConfiguration( newItem );
        }
    }
}

utility::string_t DataSink::getType() const
{
    return m_Type;
}


void DataSink::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool DataSink::typeIsSet() const
{
    return m_TypeIsSet;
}

void DataSink::unsetType()
{
    m_TypeIsSet = false;
}

std::shared_ptr<Map> DataSink::getConfiguration() const
{
    return m_Configuration;
}


void DataSink::setConfiguration(std::shared_ptr<Map> value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}
bool DataSink::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void DataSink::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}

}
}
}
}
}

